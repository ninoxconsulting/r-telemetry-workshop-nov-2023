---
title: "Visualization of Spatial Data"
---

## Outline

- Quick recap of `plot()`
- Pretty (and useful) maps with `{ggplot2}`
- Visualizing point density
- Visualize individual animal movement

## `plot` sf objects

Previously we used `plot()` to view our `sf` objects - this is a nice quick way
to visualize our data for verification or glance at the different variables.

First, read in the caribou data:

```{r}
#| message: false
#| warning: false
library(sf)
library(dplyr)

caribou <- read_sf("clean_data/caribou.gpkg")

plot(caribou)
```

You can see that by default, this plots all of the attributes (up to 9). But we 
can plot just the points by extracting just the geometry with `st_geometry()`:

```{r}
st_geometry(caribou) |> 
  plot()
```
Or, plot just one or a few variables of interest:

```{r}
#| warning: false
caribou |> 
  select(herd, animal.sex) |> # select just the herd and sex columns
  plot(key.pos = 1) # put the legend at the bottom
```

We can also add a base map for context. Let's use the `bcmaps` package to get a 
base map. `{bcmaps}` has a large collection of useful maps of B.C.:

```{r}
#| warning: false
#| message: false
library(bcmaps)

available_layers()
```

Let's get the B.C. Natural resource boundaries:

```{r}
nr <- nr_districts()

st_geometry(nr) |> 
  plot()

caribou |> 
  st_transform(st_crs(nr)) |> # transform so in the same crs as nr
  select(herd) |> # select just the herd column (called herd)
  plot(add = TRUE)

```

But we can quickly get past the point where basic plotting lets us do what we 
want to do...

## ggplot2

[ggplot2](https://ggplot2.tidyverse.org) is a plotting package built on the theory of the "Grammar of Graphics", where a plot is built up in layers:

1. We start with the data, then 
2. add the graphical marks (points, lines, bars, etc. called "geom"s) we want to use
to represent the data, and 
3. specify "aesthetics" for how to map variables in our data to
visual representations on the plot.

Let's start with a simple histogram of fixes over time:

```{r}
library(ggplot2)

ggplot(data = caribou) + # start with data
  geom_histogram( # specify the geom
    aes( # specify aesthetics - how to map variables to visual representations
      x = date_time
    ), 
    position = "dodge" # make the bars side by side instead of stacked
  )
```

We can add a "fill" aesthetic to differentiate herds, i.e., group the bars by
herd, and use a different fill colour for each herd:

```{r}

caribou <- transform_bc_albers(caribou)

ggplot(data = caribou) + # start with data
  geom_histogram( # specify the geom
    aes( # specify aesthetics - how to map variables to visual representations
      x = date_time,
      fill = herd
    ), 
    position = "dodge" # make the bars side by side instead of stacked
  )
```

We can use the same pattern to make a map:

```{r}
ggplot(data = caribou) +
  geom_sf() # x and y are inferred from the geometry column
```

```{r}
ggplot(data = caribou) +
  geom_sf(
    aes(colour = herd, shape = animal.sex)
  )
```

We have a lot of overlapping points, so the actual density of fixes is 
obscured. We can address this in several ways:

### Transparency

We can see the density of points better by making them partially transparent. 
We do this by setting the `alpha` parameter to a value between 0 and 1 
(0 is fully transparent, 1 is fully opaque).

Note that we are setting `alpha` to a constant value *outside* the `aes()` call, 
so the setting applies equally to all points (it is not mapped to a variable).

```{r}
ggplot(data = caribou) +
  geom_sf(
    aes(colour = herd), 
    alpha = 0.1
  ) + 
  scale_colour_viridis_d() + 
  theme_bw()
```

We can subset our plot into "small multiples", or "facets" - making a small
plot for each level of a variable in our data. For example, let's look at the 
distribution of points in each month, still colouring the points by herd:

```{r}
ggplot(data = caribou) +
  geom_sf(
    aes(colour = herd), 
    alpha = 0.1
  ) + 
  scale_colour_viridis_d() + 
  facet_wrap(vars(month)) +
  theme_bw()
```

#### Your turn

Read in the scott data (`clean_data/scott_herd_subset.gpkg`), 
and plot the fixes, coloured by reproductive condition, and faceted by season 
and year. Hint: see `?facet_grid`.

For bonus points, remove the lat/long labels using the `theme()` function.

::: {.callout-tip collapse="true"}
## solution

```{r}
scott <- read_sf("clean_data/scott_herd_subset.gpkg")

ggplot(scott) +
  geom_sf(aes(colour = animal.reproductive.condition), alpha = 0.3) + 
  facet_grid(season ~ year) + 
  theme(axis.text = element_blank())
```

to get the seasons in a sensible order, set them to a factor and define the order
of the levels:

```{r}
ggplot(scott) +
  geom_sf(aes(colour = animal.reproductive.condition), alpha = 0.3) + 
  facet_grid(
    factor(season, levels = c("winter", "spring", "summer", "fall")) ~ year
  ) + 
  theme(axis.text = element_blank())
```
:::

### Binning

Another way to look at the density of points is binning - sort of like a spatial 
histogram, but instead of using bar height to represent relative numbers, use 
colour. We can use `geom_hex()` to divide our space up into a hexagonal grid
and colour the hexagons based on the number of points in each:

```{r}
# Start by extracting the X and Y coordinates as columns in our data set:
caribou <- cbind(st_coordinates(caribou), caribou)

head(caribou)

ggplot(data = caribou) +
  geom_hex(aes(x = X, y = Y)) + 
  scale_fill_viridis_c() + 
  coord_sf() +
  theme_bw()
```

We can still use faceting to split out the two herds:

```{r}
ggplot(data = caribou) +
  geom_hex(aes(x = X, y = Y)) + 
  scale_fill_viridis_c() + 
  coord_sf() +
  facet_wrap(vars(herd)) +
  theme_bw()
```

If we want to add multiple layers to our map, we simply add multiple geoms, and
add the name of the layer to the `data` argument in each:

```{r}
ggplot() +
  geom_sf(data = nr) + 
  geom_hex(aes(x = X, y = Y), data = caribou) + 
  scale_fill_viridis_c() + 
  facet_wrap(vars(herd)) +
  theme_bw()
```

We can zoom in by specifying the plot limits in `coord_sf()`

```{r}
ggplot() +
  geom_sf(data = nr) + 
  geom_hex(aes(x = X, y = Y), data = caribou) + 
  scale_fill_viridis_c() + 
  coord_sf(
    xlim = range(caribou$X) + c(-20000, 20000), # Add 20 km to all sides
    ylim = range(caribou$Y) + c(-20000, 20000)
  ) +
  facet_wrap(vars(herd)) +
  theme_bw()
```

## Probability density

We can also visualize a smooth probability density of fixes, using the 
`{ggdensity}` package:

```{r}
#| warning: false
library(ggdensity)

ggplot(data = caribou) +
  geom_hdr(aes(x = X, y = Y, fill = herd)) + 
  coord_sf() + 
  theme_bw()
```

The regions have probabilities mapped to the `alpha` aesthetic by default - the `probs` legend shows the alhpa levels.

Now let's do a bit of work to make the plot look more finished:

```{r}
#| warning: false
#| fig-width: 10

month_labels <- setNames(month.name, 1:12)

ggplot(data = caribou) +
  geom_hdr(aes(x = X, y = Y, fill = herd)) + 
  scale_fill_viridis_d(option = "turbo") + 
  scale_alpha_discrete(guide = "none") +
  coord_sf() + 
  facet_wrap(
    vars(month),
    labeller = as_labeller(month_labels)
    ) +
  theme_bw() + 
  labs(
    title = "Probability density of caribou locations, by month", 
    x = element_blank(), 
    y = element_blank(), 
    fill = "Herd"
  )
```

## Add a base map, north arrow, & scale

We can use functions from the `{ggspatial}` package to add some nice 
touches to our map to make it pretty.

We can also customize the labels, legend, and theme elements

```{r}
#| warning: false
#| fig-width: 10
#| fig-height: 8
# install.packages(c("ggspatial", "prettymapr"))
library(ggspatial)

ggplot(caribou) +
  # add background map
  annotation_map_tile(zoom = 9) + 
  # add points
  geom_sf(aes(colour = herd), alpha = 0.1) + 
  # set colour palette and increase legend alpha so you can see it
  scale_colour_viridis_d(
    option = "turbo", 
    guide = guide_legend(override.aes = list(alpha = 0.5))) + 
  # Add a North arrow and scale bar
  annotation_north_arrow(style = north_arrow_nautical()) + 
  annotation_scale(location = "tr") + 
    coord_sf() + 
  # Facet by month, custom label the facets
  facet_wrap(
    vars(month),
    labeller = as_labeller(month_labels)
    ) +
  # Add a title, remove X and Y labels
  labs(
    title = "Probability density of caribou locations, by month", 
    x = element_blank(), 
    y = element_blank(), 
    colour = "Herd"
  ) + 
  # Set background of facet labels and legend to white, 
  # put legend on the bottom
  theme(
    strip.background = element_rect(fill = "white"),
    legend.key = element_rect(fill = "white"),
    legend.position = "bottom"
  )
```

We can also look at the movement of just one or two animals:

```{r}
scott <- read_sf("clean_data/scott_herd_subset.gpkg")

scott <- cbind(st_coordinates(scott), scott)

mvmt <- scott |> 
  filter(animal.id == "SC_car171")

ggplot(mvmt) + 
  geom_path(aes(x = X, y = Y, colour = date2)) +
  scale_color_viridis_c(n.breaks = 6, trans = "date") + 
  coord_sf() + 
  labs(colour = "Date") + 
  theme_bw() + 
  theme(
    axis.title = element_blank(),
    legend.position = "bottom",
    legend.key.width = unit(4, "lines")
  )
```

## Your turn:

Modify the previous map to make a faceted (small-multiples) map for two 
or more animals, and add a background map.

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| warning: false
top_animals <- c("SC_car171", "SC_car168")

mvmt <- scott |> filter(animal.id %in% top_animals)

ggplot(mvmt) + 
  annotation_map_tile(zoom = 10) +
  geom_path(aes(x = X, y = Y, colour = date2)) + 
  facet_wrap(vars(animal.id)) +
  scale_color_viridis_c(n.breaks = 6, trans = "date") + 
  coord_sf() + 
  labs(colour = "Date") + 
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    legend.position = "bottom",
    legend.key.width = unit(4, "lines")
  )
```
:::

