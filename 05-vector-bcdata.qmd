---
title: "Getting B.C. Open Data with R"
execute: 
  cache: true
knitr:
  opts_chunk:
    message: false
    warning: false
params:
  write: true
---

The B.C. Government makes a huge amount of open data available, both spatial and 
non-spatial, and documents it in the [B.C. Data Catalogue](https://catalogue.data.gov.bc.ca).

The `{bcdata}` package allows you to interact with the catalogue, and download data,
directly from within R.

:::: { .columns }

::: { .column width=60% }

- **`bcdc_browse()`**
  - Open the catalogue in your default browser
- **`bcdc_search()`**
  - Search records in the catalogue
- **`bcdc_get_record()`**
  - Print a catalogue record
- **`bcdc_get_data()`**
  - Get catalogue data
- **`bcdc_describe_feature()`**
  - Describe the structure (columns and types) of a dataset
- **`bcdc_query_geodata()`**
  - Get & query catalogue geospatial data available through a [Web Service](https://www2.gov.bc.ca/gov/content?id=95D78D544B244F34B89223EF06DF74E)
]

:::

::: { .column width=40%}
![](images/bcdata.png){width="200"}


:::
::::

We are going to use `{bcdata}` to get some data for our telemetry analysis:

1. BEC
2. VRI
3. Forest Cutblocks
4. Lakes and wetlands
5. Streams
6. Roads

```{r packages}
#| message: false

library(bcdata)
library(sf)
library(dplyr)
library(mapview)
```

## Create an Area of Interest (AOI)

We'll read in the caribou data created in the previous module, and create an 
area of interest (a bounding box) around it, so we can use that to spatially 
subset the covariate data we will be using.

```{r aoi}
scott <- read_sf("clean_data/scott_herd_subset.gpkg")

scott_bbox <- st_bbox(scott)

## Round to nearest 100m outside the box to align with raster grids
scott_bbox["xmin"] <- floor(scott_bbox["xmin"] / 100) * 100
scott_bbox["ymin"] <- floor(scott_bbox["ymin"] / 100) * 100
scott_bbox["xmax"] <- ceiling(scott_bbox["xmax"] / 100) * 100
scott_bbox["ymax"] <- ceiling(scott_bbox["ymax"] / 100) * 100

scott_aoi <- st_as_sfc(scott_bbox)
```

```{r write-aoi}
#| eval: !expr '!file.exists(file.path("clean_data", "scott_aoi.gpkg")) || isTRUE(params$write)'
write_sf(scott_aoi, file.path("clean_data", "scott_aoi.gpkg"))
```

First, let's open the B.C. Data Catalogue in our browser:

```{r browse}
#| eval: false
bcdc_browse()
```

If you search for "BEC", one of the first hits should be the [BEC Map](https://catalogue.data.gov.bc.ca/dataset/f358a53b-ffde-4830-a325-a5a03ff672c3) record. If you click on the "Share" ( {{< fa share-nodes >}} ) button you will get 
a url: `https://catalogue.data.gov.bc.ca/dataset/f358a53b-ffde-4830-a325-a5a03ff672c3`. The last bit of the url (`f358a53b-ffde-4830-a325-a5a03ff672c3`) is the unique identifier for the record, and we can use that ID to query the dataset with `{bcdata}`.

Let's find out about the record:

```{r get-record}
bcdc_get_record("f358a53b-ffde-4830-a325-a5a03ff672c3")
```

## BEC

`bcdc_query_geodata()` by itself *does not download the data* - it retrieves the 
first few records and shows them to us, as well as some helpful information 
about the data:

```{r bec-query}
bcdc_query_geodata("f358a53b-ffde-4830-a325-a5a03ff672c3")
```

You can use `dplyr` verbs `filter()` and `select()` to cut down the amount of 
data you need to download from the web service. `filter()` can take logical 
predicates such as `==`, `>`, `%in%` etc., as well as geometry predicates such as `INTERSECTS()`, `OVERLAPS()`, `WITHIN()` etc. See [this vignette](https://bcgov.github.io/bcdata/articles/efficiently-query-spatial-data-in-the-bc-data-catalogue.html) for details.

Once your query is complete you call `collect()` to tell the server to 
execute the query and send you the data:

```{r bec-1}
bec <- bcdc_query_geodata("f358a53b-ffde-4830-a325-a5a03ff672c3") |>
    filter(INTERSECTS(scott_aoi)) |> 
    select(MAP_LABEL) |> 
    collect()

mapview(bec, zcol = "MAP_LABEL") + mapview(st_as_sf(scott_aoi))
```

You can see that filtering using the `INTERSECTS()` function does a good job of 
only downloading the features that intersect the AOI, but it doesn't actually
clip them to the AOI. We can do that with `sf::st_intersection()`. Also, there
are some columns that are "sticky" - even if you don't select them in a `select()`
statement before you call collect, they come along anyway. We can do a final 
`select()` once the data is downloaded:

```{r bec-clipped}
bec <- st_intersection(bec, scott_aoi) |> 
  select(MAP_LABEL)

mapview(bec)
```

And now we can write our BEC data to a file to use later in the analysis.

```{r write-bec}
#| eval: !expr '!file.exists(file.path("clean_data", "bec.gpkg")) || isTRUE(params$write)'
write_sf(bec, file.path("clean_data", "bec.gpkg"))
```
 
## VRI

See a list of [VRI codes](https://www2.gov.bc.ca/assets/gov/farming-natural-resources-and-industry/forestry/stewardship/forest-analysis-inventory/data-management/standards/vegcomp_poly_rank1_data_dictionaryv5_2019.pdf).

```{r vri-1}
vri <- bcdc_query_geodata("2ebb35d8-c82f-4a17-9c96-612ac3532d55") |> 
  filter(INTERSECTS(scott_aoi)) |> 
  select(PROJ_AGE_CLASS_CD_1, BCLCS_LEVEL_4, CROWN_CLOSURE_CLASS_CD) |>  
  collect() |> 
  st_intersection(scott_aoi)
```

We want to split this into separate files for different variables:

- Coniferous-leading stands
- Stands with age greater than 40 yrs (age class >=3)
- Crown closure

```{r vri-conif}

# Tree coniferous leading - select coniferous leading vri plots
vri_conif <- vri |>  
    mutate(conif = BCLCS_LEVEL_4) |> 
    filter(conif == "TC") |> 
    select(conif)
```

```{r write-vri-conif}
#| eval: !expr '!file.exists(file.path("clean_data","vri_conif.gpkg")) || isTRUE(params$write)'
write_sf(vri_conif, file.path("clean_data","vri_conif.gpkg"))
```

```{r vri-ageclass}
# Age class greater than 40 years
vri_ageclass <- vri |> 
    mutate(age_class = as.numeric(PROJ_AGE_CLASS_CD_1)) |> 
    filter(age_class >= 3) |> 
    select(age_class)
```

```{r write-vri-ageclass}
#| eval: !expr '!file.exists(file.path("clean_data", "vri_ageclass.gpkg")) || isTRUE(params$write)'
write_sf(vri_ageclass, file.path("clean_data", "vri_ageclass.gpkg"))
```

```{r vri-cc}
# Crown closure class 
vri_cc <- vri |> 
    mutate(cc_class = as.numeric(CROWN_CLOSURE_CLASS_CD)) |> 
    select(cc_class)
```

```{r write-vri-cc}
#| eval: !expr '!file.exists(file.path("clean_data", "vri_cc.gpkg")) || isTRUE(params$write)'
write_sf(vri_cc, file.path("clean_data", "vri_cc.gpkg"))
```
 
## Cutblocks

To get the cutblocks, we filter to our AOI, and also choose those blocks that
have a harvest year in the last 30 years.

We can get information about the columns in a given dataset with `bcdc_describe_feature()`:

```{r cutblocks}
bcdc_describe_feature("b1b647a6-f271-42e0-9cd0-89ec24bce9f7")

cutblocks <- bcdc_query_geodata("b1b647a6-f271-42e0-9cd0-89ec24bce9f7") |>
  filter(
    INTERSECTS(scott_aoi), 
    HARVEST_YEAR >= 1993) |>
  select(HARVEST_YEAR) |>
  collect() |> 
  st_intersection(scott_aoi)

mapview(cutblocks, zcol = "HARVEST_YEAR")
```

```{r write-cutblocks}
#| eval: !expr '!file.exists(file.path("clean_data", "cutblocks.gpkg")) || isTRUE(params$write)'
write_sf(cutblocks, file.path("clean_data", "cutblocks.gpkg"))
```

## Water bodies

### Searching the catalogue for the BC Freshwater Atlas

We can search the catalogue for data using keywords, with `bcdc_search()`. Control
the number of results returned with `n`.

```{r search-water}
bcdc_search("freshwater atlas", n = 20)
```

```{r waterbodies}

lakes <- bcdc_query_geodata("cb1e3aba-d3fe-4de1-a2d4-b8b6650fb1f6") |>
  filter(INTERSECTS(scott_aoi)) |>
  select(id, WATERBODY_TYPE, AREA_HA) |>
  collect()

wetlands <- bcdc_query_geodata("93b413d8-1840-4770-9629-641d74bd1cc6") |>
  filter(INTERSECTS(scott_aoi)) |>
  select(id, WATERBODY_TYPE, AREA_HA) |>
  collect()

# Combine the datasets into one, select only the columns we want, and 
# clip to aoi
water <- bind_rows(lakes, wetlands) |> 
  select(id, WATERBODY_TYPE, AREA_HA) |> 
  st_intersection(scott_aoi)
```

```{r write-waterbodies}
#| eval: !expr '!file.exists(file.path("clean_data", "water.gpkg")) || isTRUE(params$write)'
write_sf(water, file.path("clean_data", "water.gpkg"))
```

## Stream Index

```{r describe-streams}
streams_cols <- bcdc_describe_feature("92344413-8035-4c08-b996-65a9b3f62fca")
print(streams_cols, n = 20)
```

Let's use the `STREAM_ORDER` column to just get streams of order 3 and 4
and still intersect with our AOI.

```{r streams}
streams <- bcdc_query_geodata("92344413-8035-4c08-b996-65a9b3f62fca") |>
  filter(
    INTERSECTS(scott_aoi), 
    STREAM_ORDER >= 3
  ) |>
  select(id, STREAM_ORDER) |>
  collect() |> 
  select(id, STREAM_ORDER) |>
  st_zm() |> 
  st_intersection(scott_aoi)

mapview(streams)
```

```{r write-streams}
#| eval: !expr '!file.exists(file.path("clean_data", "streams.gpkg")) || isTRUE(params$write)'
write_sf(streams, file.path("clean_data", "streams.gpkg"))
```

## Roads

```{r roads}
roads <- bcdc_query_geodata("bb060417-b6e6-4548-b837-f9060d94743e") |> 
  filter(INTERSECTS(scott_aoi))  |> 
  select(id, ROAD_CLASS, ROAD_SURFACE) |> 
  collect() |> 
  select(ROAD_SURFACE, ROAD_CLASS) |> 
  st_intersection(scott_aoi) |> # clip roads so all inside aoi
  st_cast("MULTILINESTRING")
```

```{r write-roads}
#| eval: !expr '!file.exists(file.path("clean_data", "roads.gpkg"))'
write_sf(roads, file.path("clean_data", "roads.gpkg"))
```
