{
  "hash": "a84df4a08c189ae4f7e20ecb527f20e3",
  "result": {
    "markdown": "---\ntitle: \"Visualization of Spatial Data\"\n---\n\n\n## Outline\n\n- Quick recap of `plot()`\n- Pretty (and useful) maps with `ggplot2`\n- Visualizing point density\n- Interactive maps with mapview/leaflet\n\n## `plot` sf objects\n\nPreviously we used `plot()` to quickly plot sf objects:\n\nFirst, read in the caribou data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(dplyr)\n\ncaribou <- read_sf(\"clean_data/caribou.gpkg\")\n\nplot(caribou)\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nYou can see that by default, this plots all of the attributes (up to 9). But we \ncan plot just the points by extracting just the geometry with `st_geometry()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(caribou) |> \n  plot()\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\nOr, plot just one variable of interest:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncaribou |> \n  select(herd) |> # select just the herd column (called herd)\n  plot(key.pos = 1)\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nWe can also add a base map for context. Let's use the `bcmaps` package to get a map of the\nB.C. Natural resource boundaries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(bcmaps)\n\nnr <- nr_districts()\n\nst_geometry(nr) |> \n  plot()\n\ncaribou |> \n  st_transform(st_crs(nr)) |> # transform so in the same crs as nr\n  select(herd) |> # select just the herd column (called herd)\n  plot(add = TRUE)\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nBut we can quickly get past the point where basic plotting lets us do what we \nwant to do...\n\n## ggplot2\n\n[ggplot2](https://ggplot2.tidyverse.org) is a plotting package built on the theory of the \"Grammar of Graphics\", \nwhere a plot is built up in layers:\n\nWe start with the data, then add the graphical marks (points, lines, bars, etc. called \"geom\"s) we want to use\nto represent the data, and specify \"aesthetics\" for how to map variables in our data to\nvisual representations on the plot.\n\nLet's start with a simple histogram of fixes over time:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(data = caribou) + # start with data\n  geom_histogram( # specify the geom\n    aes( # specify aesthetics - how to map variables to visual representations\n      x = date_time\n    ), \n    position = \"dodge\" # make the bars side by side instead of stacked\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nWe can add a \"fill\" aesthetic to differentiate herds:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\ncaribou <- transform_bc_albers(caribou)\n\nggplot(data = caribou) + # start with data\n  geom_histogram( # specify the geom\n    aes( # specify aesthetics - how to map variables to visual representations\n      x = date_time,\n      fill = herd\n    ), \n    position = \"dodge\" # make the bars side by side instead of stacked\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nWe can use the same pattern to make a map:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = caribou) +\n  geom_sf() # x and y are inferred from the geometry column\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = caribou) +\n  geom_sf(\n    aes(colour = herd, shape = animal.sex)\n  )\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nWe have a lot of overlapping points, so the actual density of fixes is somewhat\nobscured. We can fix this in several ways:\n\n### Transparency\n\nWe can see the density of points better by making them partially transparent. \nWe do this by setting the `alpha` aesthetic to a value between 0 and 1 \n(0 is fully transparent, 1 is fully opaque).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = caribou) +\n  geom_sf(\n    aes(colour = herd), \n    alpha = 0.1\n  ) + \n  scale_colour_viridis_d() + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = caribou) +\n  geom_sf(\n    aes(colour = herd), \n    alpha = 0.1\n  ) + \n  scale_colour_viridis_d() + \n  facet_wrap(vars(month)) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### Binning\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncaribou <- cbind(st_coordinates(caribou), caribou)\n\nggplot(data = caribou) +\n  geom_hex(aes(x = X, y = Y)) + \n  scale_fill_viridis_c() + \n  coord_sf() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nWe can use facetting to split out the two herds:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = caribou) +\n  geom_hex(aes(x = X, y = Y)) + \n  scale_fill_viridis_c() + \n  coord_sf() +\n  facet_wrap(vars(herd)) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nIf we want to add multiple layers together, we simply add multiple geoms, and\nadd the name of the layer to the `data` argument in each:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = nr) + \n  geom_hex(aes(x = X, y = Y), data = caribou) + \n  scale_fill_viridis_c() + \n  facet_wrap(vars(herd)) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nWe can zoom in be specifying the limits in `coord_sf()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = nr) + \n  geom_hex(aes(x = X, y = Y), data = caribou) + \n  scale_fill_viridis_c() + \n  coord_sf(\n    xlim = st_bbox(caribou)[c(\"xmin\",\"xmax\")] + c(-20000, 20000), \n    ylim = st_bbox(caribou)[c(\"ymin\",\"ymax\")] + c(-20000, 20000)\n  ) +\n  facet_wrap(vars(herd)) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## Density\n\nWe can also visualize the probability density of fixes, using the `{ggdensity}` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggdensity)\n\nggplot(data = caribou) +\n  geom_hdr(aes(x = X, y = Y, fill = herd)) + \n  scale_fill_viridis_d(option = \"turbo\") +\n  coord_sf() + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth_labels <- setNames(month.name, 1:12)\n\nggplot(data = caribou) +\n  geom_hdr(aes(x = X, y = Y, fill = herd)) + \n  scale_fill_viridis_d(option = \"turbo\") + \n  scale_alpha_discrete(guide = \"none\") +\n  coord_sf() + \n  facet_wrap(\n    vars(month),\n    labeller = as_labeller(month_labels)\n    ) +\n  theme_bw() + \n  labs(\n    title = \"Probability density of caribou locations, by month\", \n    x = element_blank(), \n    y = element_blank(), \n    fill = \"Herd\"\n  )\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n## Add a base map, north arrow, & scale\n\nWe can use functions from the `{ggspatial}` package to add some nice \ntouches to our map to make it pretty.\n\nWe can also customize the labels, legend, and theme elements\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(c(\"ggspatial\", \"prettymapr\"))\nlibrary(ggspatial)\n\nggplot(caribou) +\n  # add background map\n  annotation_map_tile(zoom = 9) + \n  # add points\n  geom_sf(aes(colour = herd), alpha = 0.1) + \n  # set colour palette and increase legend alpha so you can see it\n  scale_colour_viridis_d(\n    option = \"turbo\", \n    guide = guide_legend(override.aes = list(alpha = 0.5))) + \n  # Add a North arrow and scale bar\n  annotation_north_arrow(style = north_arrow_nautical()) + \n  annotation_scale(location = \"tr\") + \n    coord_sf() + \n  # Facet by month, custom label the facets\n  facet_wrap(\n    vars(month),\n    labeller = as_labeller(month_labels)\n    ) +\n  # Add a title, remove X and Y labels\n  labs(\n    title = \"Probability density of caribou locations, by month\", \n    x = element_blank(), \n    y = element_blank(), \n    colour = \"Herd\"\n  ) + \n  # Set background of facet labels and legend to white, \n  # put legend on the bottom\n  theme(\n    strip.background = element_rect(fill = \"white\"),\n    legend.key = element_rect(fill = \"white\"),\n    legend.position = \"bottom\"\n  )\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "04-spatial-data-viz_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}