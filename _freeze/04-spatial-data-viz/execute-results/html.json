{
  "hash": "f1e54d948886fa5e11b53f31ba44d491",
  "result": {
    "markdown": "---\ntitle: \"Visualization of Spatial Data\"\n---\n\n\n## Outline\n\n- Quick recap of `plot()`\n- Pretty (and useful) maps with `ggplot2`\n- Visualizing point density\n- Interactive maps with mapview/leaflet\n\n## `plot` sf objects\n\nPreviously we used `plot()` to quickly plot sf objects:\n\nFirst, read in the caribou data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(dplyr)\n\ncaribou <- read_sf(\"clean_data/caribou.gpkg\")\n\nplot(caribou)\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nYou can see that by default, this plots all of the attributes (up to 9). But we \ncan plot just the points by extracting just the geometry with `st_geometry()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(caribou) |> \n  plot()\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\nOr, plot just one variable of interest:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncaribou |> \n  select(comments) |> # select just the herd column (called comments)\n  plot(key.pos = 1)\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nWe can also add a base map for context. Let's use the `bcmaps` package to get a map of the\nB.C. Natural resource boundaries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(bcmaps)\n\nnr <- nr_districts()\n\nst_geometry(nr) |> \n  plot()\n\ncaribou |> \n  st_transform(st_crs(nr)) |> # transform so in the same crs as nr\n  select(comments) |> # select just the herd column (called comments)\n  plot(add = TRUE)\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nBut we can quickly get past the point where basic plotting lets us do what we \nwant to do...\n\n## ggplot2\n\n[ggplot2](https://ggplot2.tidyverse.org) is a plotting package built on the theory of the \"Grammar of Graphics\", \nwhere a plot is built up in layers:\n\nWe start with the data, then add the graphical marks (points, lines, bars, etc. called \"geom\"s) we want to use\nto represent the data, and specify \"aesthetics\" for how to map variables in our data to\nvisual representations on the plot.\n\nlet's start with a simple histogram of fixes over time:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(data = caribou) + # start with data\n  geom_histogram( # specify the geom\n    aes( # specify aesthetics - how to map variables to visual representations\n      x = date_time\n    ), \n    position = \"dodge\" # make the bars side by side instead of stacked\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nWe can add a \"fill\" aesthetic to differentiate herds:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\ncaribou <- transform_bc_albers(caribou)\n\nggplot(data = caribou) + # start with data\n  geom_histogram( # specify the geom\n    aes( # specify aesthetics - how to map variables to visual representations\n      x = date_time,\n      fill = comments\n    ), \n    position = \"dodge\" # make the bars side by side instead of stacked\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nWe can use the same pattern to make a map:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = caribou) +\n  geom_sf() # x and y are inferred from the geometry column\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = caribou) +\n  geom_sf(\n    aes(colour = comments, shape = animal.sex)\n  )\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nWe have a lot of overlapping points, so the actual density of fixes is somewhat\nobscured. We can fix this in several ways:\n\n### Transparency\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = caribou) +\n  geom_sf(\n    aes(colour = comments), \n    alpha = 0.2\n  ) + \n  scale_colour_viridis_d() + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### Binning\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# TODO: Gen will update the gpkg to keep the coordinates as columns\ncaribou <- cbind(st_coordinates(caribou), caribou)\n\nggplot(data = caribou) +\n  geom_hex(aes(x = X, y = Y)) + \n  scale_fill_viridis_c() + \n  coord_sf() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nWe can use facetting to split out the two herds:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = caribou) +\n  geom_hex(aes(x = X, y = Y)) + \n  scale_fill_viridis_c() + \n  coord_sf() +\n  facet_wrap(vars(comments)) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = nr) + \n  geom_hex(aes(x = X, y = Y), data = caribou) + \n  scale_fill_viridis_c() + \n  coord_sf(\n    xlim = st_bbox(caribou)[c(1,3)] + c(-20000, 20000), \n    ylim = st_bbox(caribou)[c(2,4)] + c(-20000, 20000)\n  ) +\n  facet_wrap(vars(comments)) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](04-spatial-data-viz_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "04-spatial-data-viz_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}