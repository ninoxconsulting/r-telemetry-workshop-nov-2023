{
  "hash": "2b51c6ff8506ba3f8d7519822ca5de0b",
  "result": {
    "markdown": "---\ntitle: \"Generating Kernel Density Estimates\"\n---\n\n\n\n\n## Overview\n\nIn this module we will use caribou data to create home range estimates using kernal density and minimum convex polygons. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\n#install.packages(\"ks\")\nlibrary(ks)\nlibrary(mapview)\n\n\nscott <- st_read(\"clean_data/caribou.gpkg\") %>% \n  st_transform(3005)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `caribou' from data source \n  `/Users/andy/dev/r-telemetry-workshop-nov-2023/clean_data/caribou.gpkg' \n  using driver `GPKG'\nSimple feature collection with 17092 features and 15 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 1145290 ymin: 1143000 xmax: 1247842 ymax: 1227464\nProjected CRS: NAD83 / BC Albers\n```\n:::\n\n```{.r .cell-code}\nspt <- scott %>% \n  st_coordinates(scott)\n  \nx <- spt\n\n\n\nst_boundary(scott) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 17092 features and 15 fields (with 17092 geometries empty)\nGeometry type: GEOMETRYCOLLECTION\nDimension:     XY\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: NAD83 / BC Albers\nFirst 10 features:\n   location.long location.lat  herd tag.local.identifier animal.id animal.sex\n1      -123.6036     55.90000 Scott               car170 SC_car170          f\n2      -123.5987     55.87343 Scott               car170 SC_car170          f\n3      -123.5903     55.87470 Scott               car170 SC_car170          f\n4      -123.4915     55.83741 Scott               car170 SC_car170          f\n5      -123.4740     55.87877 Scott               car170 SC_car170          f\n6      -123.4412     55.85412 Scott               car170 SC_car170          f\n7      -123.4325     55.91398 Scott               car171 SC_car171          f\n8      -123.4310     55.87820 Scott               car170 SC_car170          f\n9      -123.4280     55.87681 Scott               car170 SC_car170          f\n10     -123.4252     55.87287 Scott               car170 SC_car170          f\n   animal.reproductive.condition tag.manufacturer.name   tag.model\n1                   with calf: N                   ATS GPS Iridium\n2                   with calf: N                   ATS GPS Iridium\n3                   with calf: N                   ATS GPS Iridium\n4                   with calf: N                   ATS GPS Iridium\n5                   with calf: N                   ATS GPS Iridium\n6                   with calf: N                   ATS GPS Iridium\n7                   with calf: Y                   ATS GPS Iridium\n8                   with calf: N                   ATS GPS Iridium\n9                   with calf: N                   ATS GPS Iridium\n10                  with calf: N                   ATS GPS Iridium\n             date_time year month day hour minute                     geom\n1  2013-09-23 03:01:00 2013     9  23   10      1 GEOMETRYCOLLECTION EMPTY\n2  2013-10-09 03:01:00 2013    10   9   10      1 GEOMETRYCOLLECTION EMPTY\n3  2013-10-30 03:01:00 2013    10  30   10      1 GEOMETRYCOLLECTION EMPTY\n4  2014-08-11 03:01:00 2014     8  11   10      1 GEOMETRYCOLLECTION EMPTY\n5  2013-11-09 18:01:00 2013    11  10    2      1 GEOMETRYCOLLECTION EMPTY\n6  2014-08-07 03:01:00 2014     8   7   10      1 GEOMETRYCOLLECTION EMPTY\n7  2014-09-18 19:02:00 2014     9  19    2      2 GEOMETRYCOLLECTION EMPTY\n8  2013-12-06 10:02:00 2013    12   6   18      2 GEOMETRYCOLLECTION EMPTY\n9  2014-07-08 11:01:00 2014     7   8   18      1 GEOMETRYCOLLECTION EMPTY\n10 2013-11-23 18:01:00 2013    11  24    2      1 GEOMETRYCOLLECTION EMPTY\n```\n:::\n\n```{.r .cell-code}\n# minimujm convex polygons\n\n\npts1 <- st_as_sf(x = scott, coords = c('location.long', 'location.lat'))\nmy_hull <- st_convex_hull(st_union(pts1))\nplot(my_hull)\nplot(pts1[1], cex=2, col=\"blue\", add = T)\n```\n\n::: {.cell-output-display}\n![](bonus-kde_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# \n# \n# set.seed(8192) \n# samp<-200 \n# mus<-rbind(c(-2,2),c(0,0),c(2,-2)) \n# Sigmas<-rbind(diag(2),matrix(c(0.8,-0.72,-0.72,0.8),nrow=2),diag(2)) \n# cwt<-3/11 \n# props<-c((1-cwt)/2,cwt,(1-cwt)/2) \n# x<-rmvnorm.mixt(n=samp,mus=mus,Sigmas=Sigmas,props=props)\n\n\n# Kernal density \n\n# using = h ref \n\nHpi1 <- Hpi(x=x)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n```\n:::\n\n```{.r .cell-code}\nHpi2 <- Hpi.diag(x = x)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n```\n:::\n\n```{.r .cell-code}\nfhat.pi1 <-kde(x=x,H=Hpi1) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in quantile.default(dobs, prob = (100 - cont)/100): partial argument\nmatch of 'prob' to 'probs'\n```\n:::\n\n```{.r .cell-code}\nfhat.pi2 <-kde(x=x,H=Hpi2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in quantile.default(dobs, prob = (100 - cont)/100): partial argument\nmatch of 'prob' to 'probs'\n```\n:::\n\n```{.r .cell-code}\nplot(fhat.pi1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'level' to 'levels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'label' to 'labels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'level' to 'levels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'label' to 'labels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'level' to 'levels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'label' to 'labels'\n```\n:::\n\n```{.r .cell-code}\nplot(fhat.pi1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'level' to 'levels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'label' to 'labels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'level' to 'levels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'label' to 'labels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'level' to 'levels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'label' to 'labels'\n```\n:::\n\n::: {.cell-output-display}\n![](bonus-kde_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n:::\n\n\n# unconstrained Smoothed Cross Validation \n\n\n::: {.cell}\n\n```{.r .cell-code}\nHscv1 <-Hscv(x=x)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n```\n:::\n\n```{.r .cell-code}\nHscv2 <-Hscv.diag(x=x)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n```\n:::\n\n```{.r .cell-code}\nfhat.pi11<-kde(x=x,H=Hscv1) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in quantile.default(dobs, prob = (100 - cont)/100): partial argument\nmatch of 'prob' to 'probs'\n```\n:::\n\n```{.r .cell-code}\nfhat.pi22<-kde(x=x,H=Hscv2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in seq.default(a[id], b[id], length = bgridsize[id]): partial argument\nmatch of 'length' to 'length.out'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in quantile.default(dobs, prob = (100 - cont)/100): partial argument\nmatch of 'prob' to 'probs'\n```\n:::\n\n```{.r .cell-code}\nplot(fhat.pi11)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'level' to 'levels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'label' to 'labels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'level' to 'levels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'label' to 'labels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'level' to 'levels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'label' to 'labels'\n```\n:::\n\n::: {.cell-output-display}\n![](bonus-kde_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(fhat.pi22)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'level' to 'levels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'label' to 'labels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'level' to 'levels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'label' to 'labels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'level' to 'levels'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in contour.default(fhat$eval.points[[1]], fhat$eval.points[[2]], :\npartial argument match of 'label' to 'labels'\n```\n:::\n\n::: {.cell-output-display}\n![](bonus-kde_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n:::\n",
    "supporting": [
      "bonus-kde_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}