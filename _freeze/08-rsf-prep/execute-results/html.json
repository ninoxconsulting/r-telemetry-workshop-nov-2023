{
  "hash": "273b466c71ec511970d33134fcd64467",
  "result": {
    "markdown": "---\ntitle: \"Generate random sample points for RSF\"\nexecute: \n  eval: false\n---\n\n\n## Overview:\n\nIn this module we use our prepared spatial data to generate the input data files to conduct a resource selection function analysis. This includes:\n\n-   generate a set of \"background points\" from our study area.\n\n-   extract spatial information for presence and background point locations\n\n-   export as table for future use\n\n-   generate summary statistics\n\n## Background: Resource Selection Functions\n\nNow that we have a cleaned and standardized data set for the Scott Herd Caribou's we can prepare the data for further analysis.\n\nResource Selection Functions are a common method used to assess what are the driving patterns of animal habitat preference. This process uses information or covariates (i.e. landscape attribute features) for locations where animals are present and compares them to all possible locations. In this way we can gather information on what conditions (i.e. landscape, aspect, distance from road, etc) characterize higher habitat use and selection for.\n\nIn addition to preparing data for future analysis, understanding the association with telemetry point locations and landscape information can provide meaningful summary statistics, i.e. proportion of locations within a specific BEC zone.\n\n## 1. Generate background location points.\n\nWe will generate a simple set of \"background points\" based on the geographic distribution of the study area. Note you can limit the area in which these points are drawn from using more sophisticated methods, such as restricting points within a kernal density or home range estimate.\n\nLets start by reading in the libraries we will use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(terra)\nlibrary(sf)\nlibrary(mapview)\nlibrary(ggplot2)\n```\n:::\n\n\nNext, read in our point locations and rater template.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in the aoi template \ntemplate <- rast(\"clean_data/template.tif\")\n\n# read in points \nbou_pts <- st_read(\"clean_data/scott_herd_subset.gpkg\") \n\n# Lets keep only the important columns and add a \"presence/background\" column. \nbou_pts <- bou_pts |>\n  dplyr::select(animal.id, jdate)|>\n  mutate(pres_bkg = 1)\n```\n:::\n\n\nWe can use the **spatSample** function to generate random points for our given study area. This function has many more options which can be reviewed by using : **?spatSample** in the console.\n\nLets generate a set of points the same length as our \"presence\" locations using a \"random\" method.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate random points for RSF use areas.\nset.seed(123)\navail_points <- spatSample(template, size = 2906, as.points = TRUE, na.rm = TRUE, method = \"random\")\n\navail_points <- st_as_sf(avail_points)\n\n# lets rename the column to make it clear these are background points \navail_points <- avail_points |>\n  rename(\"pres_bkg\" = aoi )\n```\n:::\n\n\nWe can do a quick review of the points using mapview\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapview(avail_points) +\nmapview(bou_pts, color = \"red\", cex= 3)\n```\n:::\n\n\nWe can now combine our caribou locations and \"background\" locations into a single data set. We will retain the spatial information to allow us to easily extract the values in the corresponding raster stack\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(avail_points)\n\nhead(bou_pts)\n\nallpts <- bind_rows(bou_pts, avail_points) \n\nhead(allpts)\n# hmmmmm...........that looks weird what happened? \n\n# note we have slightly different column headers \"geom\" vs \"geometry\" \nst_geometry(avail_points) = \"geom\" \n\nallpts <- bind_rows(bou_pts, avail_points) \n```\n:::\n\n\n## Extract point values\n\nNext, we can read in our prepared raster stack as an .rds object. We can now use the **extract** function from the **terra** package to extract information for all layers in the raster stack for each of our points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in the raster stack \nrstack <- readRDS(\"clean_data/covars.RDS\")\n\n# extract all values in the raster stack for each location in the bou_pts file. \natts <- terra::extract(rstack, allpts)\n\nhead(atts)\n\n# remove unused columns \n# Could show how to use st_write() and explain the cbind(st_coordinates()) bit\nbou_full_pts <- cbind(allpts, atts) |>\n  select(-ID)\n```\n:::\n\n\nExport as geo package or as csv table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# spatial file \nwrite_sf(bou_full_pts, \"clean_data/allpts_att.gpkg\")\n\n# write out as csv, keeping the XY values\nbou_table <- st_coordinates(bou_full_pts) |> \n  cbind(bou_full_pts) |> \n  st_drop_geometry()\n\nwrite.csv(bou_table, \"clean_data/allpts_att.csv\")\n```\n:::\n\n\n## 3. Summarise attributed point data\n\nWe can use our attributed point data to provide valuable summaries of landscape feature. Lets looks at aspect and BEC zones.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aspect\nggplot(bou_table, aes(aspect)) +\n  geom_histogram(binwidth = 20) +\n  facet_wrap(~pres_bkg)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# BEC zones \nggplot(bou_table, aes(MAP_LABEL, group = pres_bkg, fill = factor(pres_bkg))) +\n  geom_bar(position = \"dodge\", show.legend = TRUE) \n```\n:::\n\n\n## Your turn\n\n1.  Generate a second set of background points used a method other than \"random\".\n\n::: {.callout-tip collapse=\"true\"}\n\n## Solution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\navail_pts_regular <- spatSample(template, size = 50, as.points = TRUE, na.rm = TRUE, method = \"regular\")\nmapview(avail_pts_regular)\n```\n:::\n\n:::\n\n2.  Use the **bou_table** we created above to explore other landscape patters. Build a ggplot to show the differences between the presence and background points.\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Here are a few example using elevation and distance to water. \n# elevation \nggplot(bou_table, aes(elevation)) +\n  geom_histogram(binwidth = 20) +\n  facet_wrap(~pres_bkg)\n\n# distance to water (layer)\nggplot(bou_table, aes(layer)) +\n  geom_histogram() +\n  facet_wrap(~pres_bkg)\n```\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}