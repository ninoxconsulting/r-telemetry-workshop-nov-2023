{
  "hash": "5433aa4cee7fa03e2570c31b19eefc9b",
  "result": {
    "markdown": "---\ntitle: \"Exploring Raster Data\"\nparams:\n  write: false\n---\n\n\n## Overview:\n\nIn this module we will explore raster data, and the available datasets which can be used in R for analysis. We will:\n\n-   prepare our study aoi to use with rasters\n\n-   extract DEM data through the **bcmaps** package\n\n-   generate DEM derived covariates,\n\n-   prepare a raster stack with all spatial layers generated to date.\n\n## Background: Rasters\n\nRaster data is information built on a standard grid. These can be characterised by the grid extent (xmin, xmax, ymin, ymax) and can have a coordinate system to orient them in space. Rasters are made up of cells or pixels, based on a resolution or cell size. Each cell contains a single value. The **terra** package contains many functions for manipulating and processing rasters.\n\nNote we will be using the BC Albers coordinate reference system (EPSG:3005). The advantages of this are 1) BCAlbers is an equal area projection across BC, 2) extent is marked using meters.\n\n## 1. Create a standard raster template.\n\nFor ease of calculations we will create a standard \"template\" raster which will form the basis for all our data analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in the libraries needed\n\nlibrary(dplyr)\nlibrary(sf)\nlibrary(bcmaps)\nlibrary(terra)\n```\n:::\n\n\nRead in our AOI that we made and saved previously. We can then convert this to a raster with a resolution of given size. In this example we will select 25m.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in the spatial file\n\nbou <- read_sf(file.path(\"clean_data/scott_herd_subset.gpkg\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in the aoi previously created\naoi <- read_sf(file.path(\"clean_data\", \"scott_aoi.gpkg\"))\n```\n:::\n\n\nWe can now convert our polygon to a raster object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a template raster with a resolution of 25m\ntemplate <- rast(aoi , resolution = 25)\n\n# create a column name\nnames(template) = \"aoi\"\n\n# assign all values to zero \nvalues(template) <- 0\n```\n:::\n\n\n\nexport the raster template for later processing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteRaster(template, file.path(\"clean_data\", \"template.tif\"), overwrite = TRUE)\n```\n:::\n\n\n## 2. Extract base data using the CDED dataset\n\nNow we can use the **bcmaps** package to directly download digital elevation data from the [Canadian Digital Elevation Model CDED](https://rdrr.io/github/bcgov/bcmaps/man/cded.html). Within BC, this is laregly equivalent to the TRIM DEM dataset. We will use the **cded_terra** function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract DEM raw data - Note this is downloaded in tiles which will be cached to avoid the need to redownload repeatedly \n\ntrim_raw <- bcmaps::cded_terra(aoi)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nchecking your existing tiles for mapsheet 93o are up to date\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nchecking your existing tiles for mapsheet 94b are up to date\n```\n:::\n\n```{.r .cell-code}\n# lets look at the raster\ntrim_raw\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \ndimensions  : 1659, 3208, 1  (nrow, ncol, nlyr)\nresolution  : 0.0002083333, 0.0002083333  (x, y)\nextent      : -123.6851, -123.0168, 55.6746, 56.02022  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat NAD83 (EPSG:4269) \nsource      : file438b55a9d52c.vrt \nname        : elevation \n```\n:::\n\n```{.r .cell-code}\nres(trim_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.0002083333 0.0002083333\n```\n:::\n\n```{.r .cell-code}\n# note this is in WGS so we need to convert to 3005\n# reproject to match our raster template crs and extent\n\ntrim_3005 <- project(trim_raw, template)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# write out the individual raster\nwriteRaster(trim_3005, file.path(\"clean_data\", \"dem.tif\"), overwrite = TRUE) \n```\n:::\n\n\n## 3. Generate DEM derived covariates\n\nNow we can use the terrain functions within the terra package to generate some standard base layers derived from the DEM.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# generate slope \nrslope <- terrain(trim_3005, v = \"slope\", neighbors = 8, unit = \"degrees\") \n\n# generate aspect\naspect <- terrain(trim_3005, v = \"aspect\", neighbors = 8,  unit = \"degrees\") \n\n# generate topographic roughness index\ntri <- terrain(trim_3005, v = \"TRI\", neighbors = 8)\n\n# create a raster stack\nrstack <- c(trim_3005, rslope, aspect, tri)\n\nplot(rstack)\n```\n\n::: {.cell-output-display}\n![](06-raster-data_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nwrite our the individual rasters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteRaster(rslope, file.path(\"clean_data\", \"slope.tif\"), overwrite = TRUE) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteRaster(aspect , file.path(\"clean_data\", \"aspect.tif\"), overwrite = TRUE) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteRaster(tri , file.path(\"clean_data\", \"tri.tif\"), overwrite = TRUE) \n```\n:::\n\n\n## Bonus Questions.\n\n1.  Explore what other covariates you can generate using the **terra::terrain** function. Hint use **?terrain** to bring up a help file.\n\n2.  Compare outputs of aspect which the neighbours parameter is adjusted. What difference does this make to the output and the time to process?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}