{
  "hash": "415347cdacd6d81d5c7fba6aa404d34c",
  "result": {
    "markdown": "---\ntitle: \"Introduction to Telemetry Data\"\nexecute: \n  cache: true\nparams:\n  write: true\n---\n\n\n## How to QA and summarise your Telemetry Data\n\nIn this course we will be using Telemetry data from Mountain Caribou (*Rangifer terendus*) herds in the Peace region of British Columbia. While the full dataset and metadata can be found on [movebank](https://www.movebank.org/cms/webapp?gwt_fragment=page=studies,path=study216040785), we will be working on a modified subset throughout this course. TEST\n\n### 1. Reading our data into R.\n\nOur first step is to see what our data looks like. In this course we will be providing two csv files (Mountain caribou in British Columbia-reference-data.csv and Mountain caribou.csv).\n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/read-in-raw-data_2e31f595d0f59799db8d7740d78f7fc8'}\n\n```{.r .cell-code}\n# Read in our data files.\n\nlibrary(readr)\nlibrary(sf)\nlibrary(readxl)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(ggplot2)\n\nref_raw <- read_csv(\"raw_data/Mountain caribou in British Columbia-reference-data.csv\", \n                    name_repair = \"universal\")\n\nloc_raw <- read_xlsx(\"raw_data/Mountain caribou.xlsx\")\n```\n:::\n\n\nLets take a look....\n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/review-raw-data_a30cb788259fd12a4fd7cdea40ed0175'}\n\n```{.r .cell-code}\nhead(ref_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 26\n  tag.id  animal.id  animal.taxon      deploy.on.date deploy.off.date\n  <chr>   <chr>      <chr>             <time>         <time>         \n1 151.51  HR_151.510 Rangifer tarandus    NA             NA          \n2 C04a    GR_C04     Rangifer tarandus    NA          59:00          \n3 C03     GR_C03     Rangifer tarandus    NA             NA          \n4 151.805 HR_151.805 Rangifer tarandus    NA             NA          \n5 151.76  HR_151.760 Rangifer tarandus    NA             NA          \n6 151.72  HR_151.720 Rangifer tarandus    NA             NA          \n# ℹ 21 more variables: animal.death.comments <chr>, animal.life.stage <chr>,\n#   animal.reproductive.condition <chr>, animal.sex <chr>,\n#   animal.taxon.detail <chr>, attachment.type <chr>,\n#   deploy.off.latitude <dbl>, deploy.off.longitude <dbl>,\n#   deploy.on.latitude <dbl>, deploy.on.longitude <dbl>,\n#   deploy.on.person <chr>, deployment.comments <chr>,\n#   deployment.end.comments <chr>, deployment.end.type <chr>, …\n```\n:::\n\n```{.r .cell-code}\nnames(ref_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"tag.id\"                        \"animal.id\"                    \n [3] \"animal.taxon\"                  \"deploy.on.date\"               \n [5] \"deploy.off.date\"               \"animal.death.comments\"        \n [7] \"animal.life.stage\"             \"animal.reproductive.condition\"\n [9] \"animal.sex\"                    \"animal.taxon.detail\"          \n[11] \"attachment.type\"               \"deploy.off.latitude\"          \n[13] \"deploy.off.longitude\"          \"deploy.on.latitude\"           \n[15] \"deploy.on.longitude\"           \"deploy.on.person\"             \n[17] \"deployment.comments\"           \"deployment.end.comments\"      \n[19] \"deployment.end.type\"           \"deployment.id\"                \n[21] \"manipulation.type\"             \"study.site\"                   \n[23] \"tag.beacon.frequency\"          \"tag.manufacturer.name\"        \n[25] \"tag.model\"                     \"tag.serial.no\"                \n```\n:::\n\n```{.r .cell-code}\nref_short <- ref_raw %>%\n  select(tag.id, animal.id, deploy.on.date, animal.sex, animal.reproductive.condition,\n         deployment.end.type,tag.model, tag.manufacturer.name, tag.serial.no)\n\nhead(loc_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n    event.id timestamp location.long location.lat   DOP FixType     herd \n       <dbl> <chr>             <dbl>        <dbl> <dbl> <chr>       <chr>\n1 2270202009 01:00.0           -124.         55.9     1 val. GPS-3D Scott\n2 2270202041 01:00.0           -124.         55.9     1 val. GPS-3D Scott\n3 2270202100 01:00.0           -124.         55.9     1 val. GPS-3D Scott\n4 2270202901 01:00.0           -123.         55.8     1 val. GPS-3D Scott\n5 2270202132 01:00.0           -123.         55.9     1 val. GPS-3D Scott\n6 2270202890 01:00.0           -123.         55.9     1 val. GPS-3D Scott\n# ℹ 7 more variables: study.specific.measurement <chr>, sensor.type <chr>,\n#   individual.taxon.canonical.name <chr>, tag.local.identifier <chr>,\n#   individual.local.identifier <chr>, study.name <chr>, date <chr>\n```\n:::\n:::\n\n\nWe can combine these two dataset and keep only the columns which are of interest\n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/filter-raw-fields_81d08ff84cc29c4b50239aed1a7ee68e'}\n\n```{.r .cell-code}\nall_data <- left_join(loc_raw, ref_raw, by = c('tag.local.identifier' = 'tag.id') )\n\nall_data <- all_data %>% \n  select(event.id, location.long, location.lat, DOP, FixType, herd,\n         study.specific.measurement, sensor.type, tag.local.identifier, date, animal.id,\n         animal.sex, animal.reproductive.condition, tag.manufacturer.name, tag.model )\n```\n:::\n\n\n### 2. Clean and QA the data\n\n#### 2a. Data input errors and column formats\n\nNow we have a single data set we can QA the data and provide more useful columns for further analysis.\n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/remove-NA-values_7307816fe19a40e7f5b58dbb6acea129'}\n\n```{.r .cell-code}\nhead(all_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 15\n  event.id location.long location.lat   DOP FixType herd  study.specific.measu…¹\n     <dbl>         <dbl>        <dbl> <dbl> <chr>   <chr> <chr>                 \n1   2.27e9         -124.         55.9     1 val. G… Scott Summer                \n2   2.27e9         -124.         55.9     1 val. G… Scott Summer                \n3   2.27e9         -124.         55.9     1 val. G… Scott Summer                \n4   2.27e9         -123.         55.8     1 val. G… Scott Summer                \n5   2.27e9         -123.         55.9     1 val. G… Scott Winter                \n6   2.27e9         -123.         55.9     1 val. G… Scott Summer                \n# ℹ abbreviated name: ¹​study.specific.measurement\n# ℹ 8 more variables: sensor.type <chr>, tag.local.identifier <chr>,\n#   date <chr>, animal.id <chr>, animal.sex <chr>,\n#   animal.reproductive.condition <chr>, tag.manufacturer.name <chr>,\n#   tag.model <chr>\n```\n:::\n\n```{.r .cell-code}\n# check if there are NA's in the data \n\napply(all_data, 2, function(x) any(is.na(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     event.id                 location.long \n                        FALSE                          TRUE \n                 location.lat                           DOP \n                         TRUE                         FALSE \n                      FixType                          herd \n                        FALSE                          TRUE \n   study.specific.measurement                   sensor.type \n                         TRUE                         FALSE \n         tag.local.identifier                          date \n                        FALSE                         FALSE \n                    animal.id                    animal.sex \n                        FALSE                         FALSE \nanimal.reproductive.condition         tag.manufacturer.name \n                         TRUE                         FALSE \n                    tag.model \n                        FALSE \n```\n:::\n\n```{.r .cell-code}\n# Lets filter out any missing values \n\nlength(all_data$event.id)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17197\n```\n:::\n\n```{.r .cell-code}\ntdata <- all_data %>% \n  filter(!is.na(date)) %>%\n  filter(!is.na(location.long)) %>%\n  filter(!is.na(location.lat)) \n\n\n# Herd\nunique(tdata$herd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Scott\"      \"Burnt Pine\" NA          \n```\n:::\n\n```{.r .cell-code}\n# two missing herd values which we can fill in (or delete)\n\ntdata <- tdata %>% \n  mutate(herd = case_when(\n    animal.id == \"BP_car043\" ~ \"Burnt Pine\", \n    animal.id == \"SC_car170\" ~ \"Scott\",\n    .default = herd\n  ))\n\n\n\n#length(tdata$event.id)\n```\n:::\n\n\nNow lets covert the timestamp into a usable format\n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/convert-time-stamp_0a145f8bdddd7b22a6384899a8a627cd'}\n\n```{.r .cell-code}\n# calculate time differences\ntdata <- tdata  %>%\n  mutate(date_time = ymd_hms(date)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `date_time = ymd_hms(date)`.\nCaused by warning:\n!  5 failed to parse.\n```\n:::\n\n```{.r .cell-code}\n# owch we still have an error in this dataset\n\n# lets see if we can find it..... \n\nhead(sort(unique(tdata$date)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2003-12-12 13:03:29.000\" \"2003-12-13 09:03:10.000\"\n[3] \"2003-12-14 05:03:11.000\" \"2003-12-15 01:03:10.000\"\n[5] \"2003-12-15 21:04:00.000\" \"2003-12-16 17:03:10.000\"\n```\n:::\n\n```{.r .cell-code}\ntail(sort(unique(tdata$date)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2016-03-16 10:01:00.000\" \"2016-03-16 17:49:00.000\"\n[3] \"2016-03-16 19:49:00.000\" \"2016-03-17 17:53:00.000\"\n[5] \"2016-03-17 19:53:00.000\" \"NA\"                     \n```\n:::\n\n```{.r .cell-code}\ntdata <- tdata  %>% \n  filter(date != \"NA\")\n\ntdata  <- tdata  %>%\n  mutate(date_time = ymd_hms(date)) \n\n#head(tdata$date_time) \n\n# Note the Universal Coordinated Time Zone\n\n\n# lets split this data format into something more useful \n\ntdata  <- tdata  %>%\n  mutate(year = year(date_time )) %>%\n  mutate(month = month(date_time ),\n         day = day(date_time),\n         hour = hour(date_time),\n         minute = minute(date_time))\n```\n:::\n\n\n#### 2a. QA Spatial accuracy values\n\nNow we have fixed our data entry problems we also want to review the spatial accuracy. We have two metrics: DOP (Dilution of Precision), and a Fix Type.\n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/clean-lat-longs_ad1b5f67f9499b2a3c2557c82470ed61'}\n\n```{.r .cell-code}\n# review the lat / longs \n\nrange(tdata$location.lat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  55.2249 155.4764\n```\n:::\n\n```{.r .cell-code}\nhist(tdata$location.lat)\n```\n\n::: {.cell-output-display}\n![](03-intro-telemetry-data_files/figure-html/clean-lat-longs-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# above 65 latidude\n\nrange(tdata$location.long)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -123.6684  -22.0000\n```\n:::\n\n```{.r .cell-code}\nhist(tdata$location.long)\n```\n\n::: {.cell-output-display}\n![](03-intro-telemetry-data_files/figure-html/clean-lat-longs-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# greater than -100 longitude. \n\ntdata <- tdata %>% \n  filter(location.long <= -100) %>%\n  filter(location.lat <= 65)\n\n# DOP \n\nrange (tdata$DOP)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1.0 43.1\n```\n:::\n\n```{.r .cell-code}\nhist(tdata$DOP)\n```\n\n::: {.cell-output-display}\n![](03-intro-telemetry-data_files/figure-html/clean-lat-longs-3.png){width=672}\n:::\n\n```{.r .cell-code}\nunique(tdata$DOP)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1.0  1.2  1.4  1.6  1.8  2.0  2.2  2.4  2.6  2.8  3.0  3.2  3.4  3.6  3.8\n[16]  4.0  4.2  4.4  4.6  4.8  5.0  5.2  5.4  5.6  5.8  6.4  6.6  7.2  7.8  7.9\n[31] 11.8 18.0 43.1\n```\n:::\n\n```{.r .cell-code}\n# for this example we only want to keep fixes with a DOP less than 10m\n\nfdata <- tdata %>% \n  filter(DOP <= 10)\n\nhist(fdata$DOP)\n```\n\n::: {.cell-output-display}\n![](03-intro-telemetry-data_files/figure-html/clean-lat-longs-4.png){width=672}\n:::\n\n```{.r .cell-code}\nunique(tdata$DOP)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1.0  1.2  1.4  1.6  1.8  2.0  2.2  2.4  2.6  2.8  3.0  3.2  3.4  3.6  3.8\n[16]  4.0  4.2  4.4  4.6  4.8  5.0  5.2  5.4  5.6  5.8  6.4  6.6  7.2  7.8  7.9\n[31] 11.8 18.0 43.1\n```\n:::\n\n```{.r .cell-code}\n# Fix Type : \n\nfixtype <- fdata %>% \n  group_by(FixType) %>%\n  summarise(count = n())\n\nfixtype\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  FixType     count\n  <chr>       <int>\n1 GPS-2D         92\n2 GPS-3D        291\n3 val. GPS-3D 16801\n```\n:::\n\n```{.r .cell-code}\n# remove the 2d locations \n\nfdata <- fdata %>% \n  filter(FixType != \"GPS-2D\")\n\n# see what the data looks like\nglimpse(fdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 17,092\nColumns: 21\n$ event.id                      <dbl> 2270202009, 2270202041, 2270202100, 2270…\n$ location.long                 <dbl> -123.6036, -123.5987, -123.5903, -123.49…\n$ location.lat                  <dbl> 55.90000, 55.87343, 55.87470, 55.83741, …\n$ DOP                           <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ FixType                       <chr> \"val. GPS-3D\", \"val. GPS-3D\", \"val. GPS-…\n$ herd                          <chr> \"Scott\", \"Scott\", \"Scott\", \"Scott\", \"Sco…\n$ study.specific.measurement    <chr> \"Summer\", \"Summer\", \"Summer\", \"Summer\", …\n$ sensor.type                   <chr> \"gps\", \"gps\", \"gps\", \"gps\", \"gps\", \"gps\"…\n$ tag.local.identifier          <chr> \"car170\", \"car170\", \"car170\", \"car170\", …\n$ date                          <chr> \"2013-09-23 10:01:00.000\", \"2013-10-09 1…\n$ animal.id                     <chr> \"SC_car170\", \"SC_car170\", \"SC_car170\", \"…\n$ animal.sex                    <chr> \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", …\n$ animal.reproductive.condition <chr> \"with calf: N\", \"with calf: N\", \"with ca…\n$ tag.manufacturer.name         <chr> \"ATS\", \"ATS\", \"ATS\", \"ATS\", \"ATS\", \"ATS\"…\n$ tag.model                     <chr> \"GPS Iridium\", \"GPS Iridium\", \"GPS Iridi…\n$ date_time                     <dttm> 2013-09-23 10:01:00, 2013-10-09 10:01:0…\n$ year                          <dbl> 2013, 2013, 2013, 2014, 2013, 2014, 2014…\n$ month                         <dbl> 9, 10, 10, 8, 11, 8, 9, 12, 7, 11, 6, 12…\n$ day                           <int> 23, 9, 30, 11, 10, 7, 19, 6, 8, 24, 20, …\n$ hour                          <int> 10, 10, 10, 10, 2, 10, 2, 18, 18, 2, 2, …\n$ minute                        <int> 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 0, 0, 1…\n```\n:::\n\n```{.r .cell-code}\n# lets check if this column is any use? \nunique(fdata$sensor.type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"gps\"\n```\n:::\n\n```{.r .cell-code}\n# remove the columns that we dont need\nfdata <- fdata %>% \n  select(-FixType, -DOP, -date, -study.specific.measurement, -sensor.type, -event.id)\n```\n:::\n\n\n## Output cleaned \n\nWe can output out cleaned data as a table\n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/write-csv_6468b5866b150e9abf426c0729144043'}\n\n```{.r .cell-code}\nwrite_csv(fdata, file.path(\"clean_data\", \"caribou.csv\"))\n```\n:::\n\n\n\n## Convert to spatial file and export \n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/write-out_f7125e3990c1ea64550fc11adadc0977'}\n\n```{.r .cell-code}\n# convert to a sf object and transform to BC Albers\n\nbou <- st_as_sf(fdata, coords = c(\"location.long\", \"location.lat\"), \n                crs = 4326, remove = FALSE) |> \n  st_transform(3005)\n```\n:::\n\n\nexport as .gpkg\n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/unnamed-chunk-1_a792334235ec7177b7d5f6fdd18edea8'}\n\n```{.r .cell-code}\nwrite_sf(bou, file.path(\"clean_data\", \"caribou.gpkg\"))\n```\n:::\n\n\nWe can also export to a .shp file\n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/unnamed-chunk-2_1703071a5692b62a0c7cbbb749a01c1c'}\n\n```{.r .cell-code}\nwrite_sf(bou, file.path(\"clean_data\", \"caribou.shp\"))\n\n# note warning on names for shapefile\n```\n:::\n\n\n## Generating tabular summaries\n\n\nNow we have clean data to work with we can get to the fun data exploration part! \n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/read-in-geopackage_b984164ce72c44b2c4dd93cc03873baa'}\n\n```{.r .cell-code}\n#bou = read.csv(file.path(\"clean_data\", \"caribou.csv\")\n\n# or \n\nbou_sf = read_sf(file.path(\"clean_data\", \"caribou.gpkg\"))\n\nbou <- st_drop_geometry(bou_sf)\n\n\nhead(bou)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 15\n  location.long location.lat herd  tag.local.identifier animal.id animal.sex\n          <dbl>        <dbl> <chr> <chr>                <chr>     <chr>     \n1         -124.         55.9 Scott car170               SC_car170 f         \n2         -124.         55.9 Scott car170               SC_car170 f         \n3         -124.         55.9 Scott car170               SC_car170 f         \n4         -123.         55.8 Scott car170               SC_car170 f         \n5         -123.         55.9 Scott car170               SC_car170 f         \n6         -123.         55.9 Scott car170               SC_car170 f         \n# ℹ 9 more variables: animal.reproductive.condition <chr>,\n#   tag.manufacturer.name <chr>, tag.model <chr>, date_time <dttm>, year <dbl>,\n#   month <dbl>, day <int>, hour <int>, minute <int>\n```\n:::\n\n```{.r .cell-code}\nglimpse(bou)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 17,092\nColumns: 15\n$ location.long                 <dbl> -123.6036, -123.5987, -123.5903, -123.49…\n$ location.lat                  <dbl> 55.90000, 55.87343, 55.87470, 55.83741, …\n$ herd                          <chr> \"Scott\", \"Scott\", \"Scott\", \"Scott\", \"Sco…\n$ tag.local.identifier          <chr> \"car170\", \"car170\", \"car170\", \"car170\", …\n$ animal.id                     <chr> \"SC_car170\", \"SC_car170\", \"SC_car170\", \"…\n$ animal.sex                    <chr> \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", …\n$ animal.reproductive.condition <chr> \"with calf: N\", \"with calf: N\", \"with ca…\n$ tag.manufacturer.name         <chr> \"ATS\", \"ATS\", \"ATS\", \"ATS\", \"ATS\", \"ATS\"…\n$ tag.model                     <chr> \"GPS Iridium\", \"GPS Iridium\", \"GPS Iridi…\n$ date_time                     <dttm> 2013-09-23 03:01:00, 2013-10-09 03:01:0…\n$ year                          <dbl> 2013, 2013, 2013, 2014, 2013, 2014, 2014…\n$ month                         <dbl> 9, 10, 10, 8, 11, 8, 9, 12, 7, 11, 6, 12…\n$ day                           <int> 23, 9, 30, 11, 10, 7, 19, 6, 8, 24, 20, …\n$ hour                          <int> 10, 10, 10, 10, 2, 10, 2, 18, 18, 2, 2, …\n$ minute                        <int> 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 0, 0, 1…\n```\n:::\n:::\n\n\nMany questions we can ask here: \n\n- how many herds do we have? \n- how many animals in each herd? \n- what is the sex ratio of collared animals?\n- what is the duration of each collar? Start and end years?\n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/summarise-clean-data_3f979b1b471d63154d4acc8c79807e06'}\n\n```{.r .cell-code}\nno_herds = unique(bou$herd)\n\nno_records <- bou %>% \n  group_by(herd) %>% \n  summarise(count = n())\n\nno_animals_id <- bou %>% \n  group_by(herd, animal.id) %>% \n  summarise(count = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'herd'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nno_animals_sex <- bou %>% \n  group_by(herd, animal.sex) %>% \n  summarise(count = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'herd'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\ncollar_type <- bou %>% \n  group_by(herd, tag.manufacturer.name, tag.model) %>% \n  summarise(count = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'herd', 'tag.manufacturer.name'. You can\noverride using the `.groups` argument.\n```\n:::\n:::\n\nThere is alot of data here. For the next section of this course we will just concentrate on the Scott Herd. \n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/summarise-scott-herd_914f9e084f6c93071f8f3e21fdab9b23'}\n\n```{.r .cell-code}\n# Filter to keep the Scott herd only \nsbou <- bou %>% \n  filter(herd == \"Scott\")\n\n# tidy the data by removing columns that are redundant\nsbou <- sbou %>% select(-herd, -tag.local.identifier, -tag.manufacturer.name, -tag.model)\n\n\n# how many animals?\nno_animals <- unique(sbou$animal.id)\n\n\n# lets look at the time period: \np1 <- ggplot(sbou, aes(year, fill = animal.id)) +\n    geom_bar(position = \"dodge\")\n\n\n# duration of the collars within the Scott herd. \n\ntable_max <- sbou %>% \n  select(animal.id, date_time) %>%\n  slice_max(date_time, by = animal.id) \ncolnames(table_max)<- c(\"animal.id\",\"max\")\n\ntable_min <- sbou %>% \n  select(animal.id, date_time) %>%\n  slice_min(date_time, by = animal.id) \n\ncolnames(table_min)<- c(\"animal.id\",\"min\")\n\ndur <- left_join(table_max, table_min, by = join_by(animal.id)) %>%\n  distinct() %>%\n  mutate(duration = max - min) %>%\n  mutate(dur_days = round( duration,1)) %>%\n  mutate(dur_hrs = round(as.numeric(dur_days)*24,1)) %>%\n #mutate(dur_days = round( dur_hrs/24,1)) %>%\n  mutate(year_start = year(min), \n         year_end = year(max))\n\n\n\ndur_plot <- ggplot(dur, aes(y=factor(animal.id))) +\n  geom_segment(aes(x=min, xend=max, y=factor(animal.id), yend=factor(animal.id)), linewidth = 3)+\n  xlab(\"Date\") + ylab(\"Tag\") \n\ndur_plot\n```\n\n::: {.cell-output-display}\n![](03-intro-telemetry-data_files/figure-html/summarise-scott-herd-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# months of the year. \np_duration <- ggplot(sbou, aes(factor(month), fill = factor(year)))+\n  geom_bar(position = \"dodge\") +\n  #xlim(1,12)+\n  facet_wrap(~animal.id)+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\np_duration\n```\n\n::: {.cell-output-display}\n![](03-intro-telemetry-data_files/figure-html/summarise-scott-herd-2.png){width=672}\n:::\n:::\n\n\n#### Lets check the number of fixes per month per individual \n\nwe can see that the number of fixes are relatively steady throughout the years for all individuals except SC_car171? \nsomething looks strange here: \n\nLarger spikes in Oct 2015 and Feb 2016 \n\n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/unnamed-chunk-3_aa1865a6a51ac788b23e554042533f77'}\n\n```{.r .cell-code}\nhead(sbou)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 11\n  location.long location.lat animal.id animal.sex animal.reproductive.condition\n          <dbl>        <dbl> <chr>     <chr>      <chr>                        \n1         -124.         55.9 SC_car170 f          with calf: N                 \n2         -124.         55.9 SC_car170 f          with calf: N                 \n3         -124.         55.9 SC_car170 f          with calf: N                 \n4         -123.         55.8 SC_car170 f          with calf: N                 \n5         -123.         55.9 SC_car170 f          with calf: N                 \n6         -123.         55.9 SC_car170 f          with calf: N                 \n# ℹ 6 more variables: date_time <dttm>, year <dbl>, month <dbl>, day <int>,\n#   hour <int>, minute <int>\n```\n:::\n\n```{.r .cell-code}\nsbou <- sbou %>% \n  arrange(animal.id, date_time)\n\nsbou_dur <- sbou %>%\n    mutate(time = as.POSIXct(date_time, format = \"%y/%d/%m %H:%M:%S\")) %>%\n    group_by(animal.id) %>%\n    mutate(diff = difftime(time, lag(time),  units = c(\"hours\")), \n           diff = as.numeric(diff))\n\n\n# we can see a big range in the time intervals for the fixes\n\nrange(sbou_dur$diff, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   0.01666667 111.75000000\n```\n:::\n\n```{.r .cell-code}\n# most fall in the less than than 10 \nhist(sbou_dur$diff)\n```\n\n::: {.cell-output-display}\n![](03-intro-telemetry-data_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# lets look at the individual animals\n\nggplot(sbou_dur, aes(diff)) + \n  geom_histogram(bins=30) +\n  facet_grid(.~animal.id)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 4 rows containing non-finite values (`stat_bin()`).\n```\n:::\n\n::: {.cell-output-display}\n![](03-intro-telemetry-data_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# much of the problem is with the SC_car171 individual \n\nggplot(sbou_dur, aes(y = diff, x = date_time)) + \n  geom_point() +\n  facet_wrap(.~animal.id, scales = \"free\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 4 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](03-intro-telemetry-data_files/figure-html/unnamed-chunk-3-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# suspect that these are a mortality signal from ? \n# some collars have a higher fix rate (SC_car168 consistent less than 10 hr difference)\n```\n:::\n\n\n\n\nTo create a standardized fix per day, lets take the first fix per day. This could be based on a number of factors, depending on our research question we want to ask \n\n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/unnamed-chunk-4_a54ca5e9eba260a092cb6c72196086af'}\n\n```{.r .cell-code}\n# we can subset base on a Julian date\n\nsbou_dur <- sbou_dur %>%\n  mutate(\n    date2=as.Date(date_time, format = '%Y-%m-%d'),\n    jdate=julian(date2)\n  )\n\n# Check the multiple counts of anaimals per day \ncounts.per.day.jdate <- sbou_dur %>% \n  group_by(animal.id, jdate, year) %>% \n  summarise(total = n(), unique = unique(jdate)) %>% \n  group_by(animal.id, total, year) %>% \n  summarise(total.j = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'animal.id', 'jdate'. You can override\nusing the `.groups` argument.\n`summarise()` has grouped output by 'animal.id', 'total'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nggplot(counts.per.day.jdate, aes(x = total, y = total.j)) + \n  geom_point() +\n  geom_vline(xintercept = 1, color = \"red\")+\n  facet_wrap(.~animal.id + year)\n```\n\n::: {.cell-output-display}\n![](03-intro-telemetry-data_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsbou_sub <- sbou_dur %>%\n    group_by(animal.id, jdate) %>%\n    slice_sample( n = 1) \n\n\n# repeat this\n\n# Check the multiple counts of anaimals per day \ncounts.per.day.jdate <- sbou_sub %>% group_by(animal.id, jdate, year) %>% \n  summarise(total = n(), unique = unique(jdate)) %>% \n  group_by(animal.id, total, year) %>% \n  summarise(total.j = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'animal.id', 'jdate'. You can override\nusing the `.groups` argument.\n`summarise()` has grouped output by 'animal.id', 'total'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nggplot(counts.per.day.jdate, aes(x = total, y = total.j)) + \n  geom_point() +\n  geom_vline(xintercept = 1, color = \"red\") +\n  facet_wrap(.~animal.id + year)\n```\n\n::: {.cell-output-display}\n![](03-intro-telemetry-data_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n\n```{.r .cell-code}\nlength(sbou_sub$location.long)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2906\n```\n:::\n:::\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/unnamed-chunk-5_f64b2c6a7b917af31cbd19ba1f809ec2'}\n\n```{.r .cell-code}\n# lets write this out as .csv and .Gpkg\n\nwrite_csv(sbou_sub, file.path(\"clean_data\", \"scott_herd_subset.csv\"))\n```\n:::\n\n\n\nconvert to a sf object \n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/unnamed-chunk-6_5dca7cf02853d56552cd7dd6072e04d5'}\n\n```{.r .cell-code}\nsbou_sub_sf <- st_as_sf(sbou_sub, coords = c(\"location.long\", \"location.lat\"), \n                        crs = 4326, remove = FALSE) |> \n  st_transform(3005)\n```\n:::\n\n\nThen write to a gpkg:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # export as .gpkg\nwrite_sf(sbou_sub_sf, file.path(\"clean_data\", \"scott_herd_subset.gpkg\"))\n```\n:::\n\n\n\n\n\n\n# Convert the dates to seasons \n\nNext we format the date variable so we can filter by months and years. We can also assign fixes to seasons based on the following dates : \n\n* Spring/calving (April,May)\n* Summer (June to August)\n*\tFall (September to November)\n*\tWinter (December to March)\n\n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/add-seasons_d25108986096b9fb806b72d0cb17d10a'}\n\n```{.r .cell-code}\nsbou <- sbou_sub %>% \n  mutate(season = case_when(\n            month %in% c(4,5) ~ \"spring\",\n            month %in% c(6,7,8) ~ \"summer\",\n            month %in% c(9,10,11) ~ \"fall\",\n            month %in% c(12,1,2,3) ~ \"winter\")) \n            \n  \n# check data spread\ncounts.per.season = sbou %>%\n  group_by(season, animal.id) %>%\n  summarise(count = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nggplot(counts.per.season, aes(x = season, y = count)) + \n  geom_bar(stat = \"identity\") + \n  facet_wrap(~animal.id) +\n  labs(x = \"season\", y = \"no.of.fixes\", title = \"Scott Herd\")\n```\n\n::: {.cell-output-display}\n![](03-intro-telemetry-data_files/figure-html/add-seasons-1.png){width=672}\n:::\n:::\n\n\nThen we can save our plot\n\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/unnamed-chunk-8_f65df7fd1dc885e52153756fc62894df'}\n\n```{.r .cell-code}\nggsave(\"caribou_fixes_per_id.jpeg\", width = 10, height = 10, units = \"cm\")\n```\n:::\n\n::: {.cell hash='03-intro-telemetry-data_cache/html/unnamed-chunk-9_49d0a811a1d49cba3ca3edef2d528f5a'}\n\n```{.r .cell-code}\n# we know that all the collared animals are female, but which are with calf or not \n\nwith_calf <- sbou %>% \n  select(animal.id, animal.reproductive.condition, season) %>% \n  unique()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `jdate`\n```\n:::\n\n```{.r .cell-code}\n# we know only one individual was seen with a calf... SC_car171 \n\n\n\n# Other questions???\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}