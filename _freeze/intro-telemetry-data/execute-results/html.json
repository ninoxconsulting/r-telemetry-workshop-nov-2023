{
  "hash": "74911ab3ddd2055ee1087258ba0b8e77",
  "result": {
    "markdown": "---\ntitle: \"Introduction to Telemetry Data\"\n---\n\n\n## How to QA and summarise your Telemetry Data\n\nIn this course we will be using Telemetry data from Mountain Caribou (*Rangifer terendus*) herds in the Peace region of British Columbia. While the full dataset and metadata can be found on [movebank](https://www.movebank.org/cms/webapp?gwt_fragment=page=studies,path=study216040785), we will be working on a modified subset throughout this course. TEST\n\n### 1. Reading our data into R.\n\nOur first step is to see what our data looks like. In this course we will be providing two csv files (Mountain caribou in British Columbia-reference-data.csv and Mountain caribou.csv).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in our data files.\n\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.9.3, GDAL 3.5.2, PROJ 8.2.1; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'lubridate'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nref_raw <- read.csv(\"raw_data/Mountain caribou in British Columbia-reference-data.csv\")\n\nloc_raw <- read_excel(\"raw_data/Mountain caribou.xlsx\")\n```\n:::\n\n\nLets take a look....\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(ref_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   tag.id  animal.id      animal.taxon deploy.on.date deploy.off.date\n1  151.51 HR_151.510 Rangifer tarandus                               \n2    C04a     GR_C04 Rangifer tarandus                        59:00.0\n3     C03     GR_C03 Rangifer tarandus                               \n4 151.805 HR_151.805 Rangifer tarandus                               \n5  151.76 HR_151.760 Rangifer tarandus                               \n6  151.72 HR_151.720 Rangifer tarandus                               \n  animal.death.comments animal.life.stage animal.reproductive.condition\n1                                                                      \n2                                                                      \n3                                                                      \n4                                                                      \n5                                                                      \n6                                                                      \n  animal.sex animal.taxon.detail attachment.type deploy.off.latitude\n1          f             caribou          collar                  NA\n2          f             caribou          collar                  NA\n3          f             caribou          collar                  NA\n4          f             caribou          collar                  NA\n5          f             caribou          collar                  NA\n6          f             caribou          collar                  NA\n  deploy.off.longitude deploy.on.latitude deploy.on.longitude deploy.on.person\n1                   NA                 NA                  NA                 \n2                   NA                 NA                  NA                 \n3                   NA                 NA                  NA                 \n4                   NA                 NA                  NA                 \n5                   NA                 NA                  NA                 \n6                   NA                 NA                  NA                 \n  deployment.comments deployment.end.comments deployment.end.type\n1                                                         unknown\n2                                                         unknown\n3                                                         unknown\n4                                                         unknown\n5                                                         unknown\n6                                                         unknown\n    deployment.id manipulation.type  study.site tag.beacon.frequency\n1 151.510_151.510              none Hart Ranges              151.510\n2        C04_C04a              none      Graham                   NA\n3         C03_C03              none      Graham                   NA\n4 151.805_151.805              none Hart Ranges              151.805\n5 151.760_151.760              none Hart Ranges              151.760\n6 151.720_151.720              none Hart Ranges              151.720\n  tag.manufacturer.name tag.model tag.serial.no\n1                                              \n2                                              \n3                                              \n4                                              \n5                                              \n6                                              \n```\n:::\n\n```{.r .cell-code}\nnames(ref_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"tag.id\"                        \"animal.id\"                    \n [3] \"animal.taxon\"                  \"deploy.on.date\"               \n [5] \"deploy.off.date\"               \"animal.death.comments\"        \n [7] \"animal.life.stage\"             \"animal.reproductive.condition\"\n [9] \"animal.sex\"                    \"animal.taxon.detail\"          \n[11] \"attachment.type\"               \"deploy.off.latitude\"          \n[13] \"deploy.off.longitude\"          \"deploy.on.latitude\"           \n[15] \"deploy.on.longitude\"           \"deploy.on.person\"             \n[17] \"deployment.comments\"           \"deployment.end.comments\"      \n[19] \"deployment.end.type\"           \"deployment.id\"                \n[21] \"manipulation.type\"             \"study.site\"                   \n[23] \"tag.beacon.frequency\"          \"tag.manufacturer.name\"        \n[25] \"tag.model\"                     \"tag.serial.no\"                \n```\n:::\n\n```{.r .cell-code}\nref_short <- ref_raw %>%\n  dplyr::select(\"tag.id\",\"animal.id\", \"deploy.on.date\", \"animal.sex\", \"animal.reproductive.condition\",\n                \"deployment.end.type\",\"tag.model\", \"tag.manufacturer.name\", \"tag.serial.no\"    )\n\n\nhead(loc_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n    event.id timestamp location.long location.lat   DOP FixType     comments\n       <dbl> <chr>             <dbl>        <dbl> <dbl> <chr>       <chr>   \n1 2270202009 01:00.0           -124.         55.9     1 val. GPS-3D Scott   \n2 2270202041 01:00.0           -124.         55.9     1 val. GPS-3D Scott   \n3 2270202100 01:00.0           -124.         55.9     1 val. GPS-3D Scott   \n4 2270202901 01:00.0           -123.         55.8     1 val. GPS-3D Scott   \n5 2270202132 01:00.0           -123.         55.9     1 val. GPS-3D Scott   \n6 2270202890 01:00.0           -123.         55.9     1 val. GPS-3D Scott   \n# ℹ 7 more variables: study.specific.measurement <chr>, sensor.type <chr>,\n#   individual.taxon.canonical.name <chr>, tag.local.identifier <chr>,\n#   individual.local.identifier <chr>, study.name <chr>, date <chr>\n```\n:::\n:::\n\n\nWe can combine these two dataset and keep only the columns which are of interest\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_data <- left_join(loc_raw, ref_raw, by = c('tag.local.identifier'= 'tag.id') )\n\nall_data <- all_data %>% \n  dplyr::select(event.id, location.long, location.lat, DOP, FixType, comments ,\n                study.specific.measurement , sensor.type, tag.local.identifier, date, animal.id,\n                animal.sex, animal.reproductive.condition, tag.manufacturer.name, tag.model )\n\n#head(all_data)\n```\n:::\n\n\n### 2. Clean and QA the data\n\n#### 2a. Data input errors and column formats\n\nNow we have a single data set we can QA the data and provide more useful columns for further analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(all_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 15\n    event.id location.long location.lat   DOP FixType     comments\n       <dbl>         <dbl>        <dbl> <dbl> <chr>       <chr>   \n1 2270202009         -124.         55.9     1 val. GPS-3D Scott   \n2 2270202041         -124.         55.9     1 val. GPS-3D Scott   \n3 2270202100         -124.         55.9     1 val. GPS-3D Scott   \n4 2270202901         -123.         55.8     1 val. GPS-3D Scott   \n5 2270202132         -123.         55.9     1 val. GPS-3D Scott   \n6 2270202890         -123.         55.9     1 val. GPS-3D Scott   \n# ℹ 9 more variables: study.specific.measurement <chr>, sensor.type <chr>,\n#   tag.local.identifier <chr>, date <chr>, animal.id <chr>, animal.sex <chr>,\n#   animal.reproductive.condition <chr>, tag.manufacturer.name <chr>,\n#   tag.model <chr>\n```\n:::\n\n```{.r .cell-code}\n# check if there are NA's in the data \n\napply(all_data, 2, function(x) any(is.na(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     event.id                 location.long \n                        FALSE                          TRUE \n                 location.lat                           DOP \n                         TRUE                         FALSE \n                      FixType                      comments \n                        FALSE                          TRUE \n   study.specific.measurement                   sensor.type \n                         TRUE                         FALSE \n         tag.local.identifier                          date \n                        FALSE                         FALSE \n                    animal.id                    animal.sex \n                        FALSE                         FALSE \nanimal.reproductive.condition         tag.manufacturer.name \n                        FALSE                         FALSE \n                    tag.model \n                        FALSE \n```\n:::\n\n```{.r .cell-code}\n# Lets filter out any missing values \n\nlength(all_data$event.id)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17197\n```\n:::\n\n```{.r .cell-code}\ntdata <- all_data %>% \n  filter(!is.na(date)) %>%\n  filter(!is.na(location.long)) %>%\n  filter(!is.na(location.lat)) \n\n\n# comments \nunique(tdata$comments)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Scott\"      \"Burnt Pine\" NA          \n```\n:::\n\n```{.r .cell-code}\n# two missing herd values which we can fill in (or delete)\n\ntdata <- tdata %>% \n  mutate(comments = case_when(\n    animal.id == \"BP_car043\" ~ \"Burnt Pine\", \n    animal.id == \"SC_car170\" ~ \"Scott\",\n    .default = comments\n  ))\n\n\n\n#length(tdata$event.id)\n```\n:::\n\n\nNow lets covert the timestamp into a usable format\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate time differences\ntdata <- tdata  %>%\n  mutate(date_time = ymd_hms(date)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `date_time = ymd_hms(date)`.\nCaused by warning:\n!  5 failed to parse.\n```\n:::\n\n```{.r .cell-code}\n# owch we still have an error in this dataset\n\n# lets see if we can find it..... \n\nhead(sort(unique(tdata$date)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2003-12-12 13:03:29.000\" \"2003-12-13 09:03:10.000\"\n[3] \"2003-12-14 05:03:11.000\" \"2003-12-15 01:03:10.000\"\n[5] \"2003-12-15 21:04:00.000\" \"2003-12-16 17:03:10.000\"\n```\n:::\n\n```{.r .cell-code}\ntail(sort(unique(tdata$date)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2016-03-16 10:01:00.000\" \"2016-03-16 17:49:00.000\"\n[3] \"2016-03-16 19:49:00.000\" \"2016-03-17 17:53:00.000\"\n[5] \"2016-03-17 19:53:00.000\" \"NA\"                     \n```\n:::\n\n```{.r .cell-code}\ntdata <- tdata  %>% \n  filter(date != \"NA\")\n\ntdata  <- tdata  %>%\n  mutate(date_time = ymd_hms(date)) \n\nhead(tdata$date_time) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2013-09-23 10:01:00 UTC\" \"2013-10-09 10:01:00 UTC\"\n[3] \"2013-10-30 10:01:00 UTC\" \"2014-08-11 10:01:00 UTC\"\n[5] \"2013-11-10 02:01:00 UTC\" \"2014-08-07 10:01:00 UTC\"\n```\n:::\n\n```{.r .cell-code}\n# Note the Universal Coordinated Time Zone\n\n\n# lets split this data format into something more useful \n\ntdata  <- tdata  %>%\n  mutate(year = year(date_time )) %>%\n  mutate(month = month(date_time ),\n         day = day(date_time),\n         hour = hour(date_time),\n         minute = minute(date_time))\n```\n:::\n\n\n#### 2a. QA Spatial accuracy values\n\nNow we have fixed our data entry problems we also want to review the spatial accuracy. We have two metrics: DOP (Dilution of Precision), and a Fix Type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# review the lat / longs \n\nrange(tdata$location.lat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  55.2249 155.4764\n```\n:::\n\n```{.r .cell-code}\nhist(tdata$location.lat)\n```\n\n::: {.cell-output-display}\n![](intro-telemetry-data_files/figure-html/clean lat longs-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# above 65 latidude\n\nrange(tdata$location.long)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -123.6684  -22.0000\n```\n:::\n\n```{.r .cell-code}\nhist(tdata$location.long)\n```\n\n::: {.cell-output-display}\n![](intro-telemetry-data_files/figure-html/clean lat longs-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# greater than -100 longitude. \n\ntdata <- tdata %>% \n  filter(location.long <= -100) %>%\n  filter(location.lat <= 65)\n\n#bou <- st_as_sf(tdata, coords = c(\"location.long\", \"location.lat\"), crs = 4326)\n#mapview::mapview (bou)\n\n# DOP \n\nrange (tdata$DOP)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1.0 43.1\n```\n:::\n\n```{.r .cell-code}\nhist(tdata$DOP)\n```\n\n::: {.cell-output-display}\n![](intro-telemetry-data_files/figure-html/clean lat longs-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# for this example we only want to keep fixes with a DOP less than 10m\n\nfdata <- tdata %>% \n  filter(DOP <= 10)\n\nhist(fdata$DOP)\n```\n\n::: {.cell-output-display}\n![](intro-telemetry-data_files/figure-html/clean lat longs-4.png){width=672}\n:::\n\n```{.r .cell-code}\n# Fix Type : \n\nfixtype <- fdata %>% \n  group_by(FixType) %>%\n  summarise(count = n())\n\nfixtype\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  FixType     count\n  <chr>       <int>\n1 GPS-2D         92\n2 GPS-3D        291\n3 val. GPS-3D 16801\n```\n:::\n\n```{.r .cell-code}\n# remove the 2d locations \n\nfdata <- fdata %>% \n  filter(FixType != \"GPS-2D\")\n\n# see what the data looks like\nglimpse(fdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 17,092\nColumns: 21\n$ event.id                      <dbl> 2270202009, 2270202041, 2270202100, 2270…\n$ location.long                 <dbl> -123.6036, -123.5987, -123.5903, -123.49…\n$ location.lat                  <dbl> 55.90000, 55.87343, 55.87470, 55.83741, …\n$ DOP                           <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ FixType                       <chr> \"val. GPS-3D\", \"val. GPS-3D\", \"val. GPS-…\n$ comments                      <chr> \"Scott\", \"Scott\", \"Scott\", \"Scott\", \"Sco…\n$ study.specific.measurement    <chr> \"Summer\", \"Summer\", \"Summer\", \"Summer\", …\n$ sensor.type                   <chr> \"gps\", \"gps\", \"gps\", \"gps\", \"gps\", \"gps\"…\n$ tag.local.identifier          <chr> \"car170\", \"car170\", \"car170\", \"car170\", …\n$ date                          <chr> \"2013-09-23 10:01:00.000\", \"2013-10-09 1…\n$ animal.id                     <chr> \"SC_car170\", \"SC_car170\", \"SC_car170\", \"…\n$ animal.sex                    <chr> \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", …\n$ animal.reproductive.condition <chr> \"with calf: N\", \"with calf: N\", \"with ca…\n$ tag.manufacturer.name         <chr> \"ATS\", \"ATS\", \"ATS\", \"ATS\", \"ATS\", \"ATS\"…\n$ tag.model                     <chr> \"GPS Iridium\", \"GPS Iridium\", \"GPS Iridi…\n$ date_time                     <dttm> 2013-09-23 10:01:00, 2013-10-09 10:01:0…\n$ year                          <dbl> 2013, 2013, 2013, 2014, 2013, 2014, 2014…\n$ month                         <dbl> 9, 10, 10, 8, 11, 8, 9, 12, 7, 11, 6, 12…\n$ day                           <int> 23, 9, 30, 11, 10, 7, 19, 6, 8, 24, 20, …\n$ hour                          <int> 10, 10, 10, 10, 2, 10, 2, 18, 18, 2, 2, …\n$ minute                        <int> 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 0, 0, 1…\n```\n:::\n\n```{.r .cell-code}\n# lets check if this column is any use? \nunique(fdata$sensor.type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"gps\"\n```\n:::\n\n```{.r .cell-code}\n# remove the columns that we dont need\nfdata <- fdata %>% \n  select(-FixType, -DOP, -date, -study.specific.measurement , -sensor.type, -event.id)\n```\n:::\n\n\n\n## conver to spatial file and export \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# conver to a sf object \n\nbou <- st_as_sf(fdata, coords = c(\"location.long\", \"location.lat\"), crs = 4326)\n\n#mapview::mapview (bou)\n\n\n# export as .gpkg\nst_write(bou, \"clean_data/caribou.gpkg\")\n\nst_write(bou, \"clean_data/caribou.shp\", append=FALSE)\n\n# note warning on names for shapefile\n```\n:::\n\n\n## Output cleaned \n\nWe can output out cleaned data as a table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(fdata, \"clean_data/caribou.csv\", row.names = F)\n```\n:::\n\n\n## Generating tabular summaries\n\n\nNow we have clean data to work with we can get to the fun data exploration part! \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#bou = read.csv(\"clean_data/caribou.csv\")\nbou_sf = st_read(\"clean_data/caribou.gpkg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `caribou' from data source \n  `C:\\Users\\genev\\OneDrive\\Documents\\02.Contracts\\2023_bcgov_geospatial\\03.Course_material\\r-telemetry-workshop-nov-2023\\clean_data\\caribou.gpkg' \n  using driver `GPKG'\nSimple feature collection with 17092 features and 13 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -123.6684 ymin: 55.2249 xmax: -122.081 ymax: 56.01707\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\nbou <- bou_sf %>%\n  cbind(st_coordinates(bou_sf)) %>%\n          st_drop_geometry(bou_sf)\n\n\nhead(bou)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  comments tag.local.identifier animal.id animal.sex\n1    Scott               car170 SC_car170          f\n2    Scott               car170 SC_car170          f\n3    Scott               car170 SC_car170          f\n4    Scott               car170 SC_car170          f\n5    Scott               car170 SC_car170          f\n6    Scott               car170 SC_car170          f\n  animal.reproductive.condition tag.manufacturer.name   tag.model\n1                  with calf: N                   ATS GPS Iridium\n2                  with calf: N                   ATS GPS Iridium\n3                  with calf: N                   ATS GPS Iridium\n4                  with calf: N                   ATS GPS Iridium\n5                  with calf: N                   ATS GPS Iridium\n6                  with calf: N                   ATS GPS Iridium\n            date_time year month day hour minute         X        Y\n1 2013-09-23 03:01:00 2013     9  23   10      1 -123.6036 55.90000\n2 2013-10-09 03:01:00 2013    10   9   10      1 -123.5987 55.87343\n3 2013-10-30 03:01:00 2013    10  30   10      1 -123.5903 55.87470\n4 2014-08-11 03:01:00 2014     8  11   10      1 -123.4915 55.83741\n5 2013-11-09 18:01:00 2013    11  10    2      1 -123.4740 55.87877\n6 2014-08-07 03:01:00 2014     8   7   10      1 -123.4412 55.85412\n```\n:::\n\n```{.r .cell-code}\nglimpse(bou)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 17,092\nColumns: 15\n$ comments                      <chr> \"Scott\", \"Scott\", \"Scott\", \"Scott\", \"Sco…\n$ tag.local.identifier          <chr> \"car170\", \"car170\", \"car170\", \"car170\", …\n$ animal.id                     <chr> \"SC_car170\", \"SC_car170\", \"SC_car170\", \"…\n$ animal.sex                    <chr> \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", …\n$ animal.reproductive.condition <chr> \"with calf: N\", \"with calf: N\", \"with ca…\n$ tag.manufacturer.name         <chr> \"ATS\", \"ATS\", \"ATS\", \"ATS\", \"ATS\", \"ATS\"…\n$ tag.model                     <chr> \"GPS Iridium\", \"GPS Iridium\", \"GPS Iridi…\n$ date_time                     <dttm> 2013-09-23 03:01:00, 2013-10-09 03:01:0…\n$ year                          <dbl> 2013, 2013, 2013, 2014, 2013, 2014, 2014…\n$ month                         <dbl> 9, 10, 10, 8, 11, 8, 9, 12, 7, 11, 6, 12…\n$ day                           <int> 23, 9, 30, 11, 10, 7, 19, 6, 8, 24, 20, …\n$ hour                          <int> 10, 10, 10, 10, 2, 10, 2, 18, 18, 2, 2, …\n$ minute                        <int> 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 0, 0, 1…\n$ X                             <dbl> -123.6036, -123.5987, -123.5903, -123.49…\n$ Y                             <dbl> 55.90000, 55.87343, 55.87470, 55.83741, …\n```\n:::\n:::\n\nMany Questions we can ask here: \n\n- how many herds do we have? \n- how many animals in each herd? \n- what is the sex ratio of collared animals?\n- what is the duration of each collar? Start and end years?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNo_herds = unique(bou$comments)\n\nno_records <- bou %>% \n  group_by(comments)%>% \n  summarise(count = n())\n\n\nno_animals_sex <- bou %>% \n  group_by(comments, animal.sex)%>% \n  summarise(count = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'comments'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nno_animals_id <- bou %>% \n  group_by(comments, animal.id)%>% \n  summarise(count = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'comments'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\nLets concentrate on the Scott herd. \n\n\n::: {.cell}\n\n```{.rsummarise .cell-code}\n# look at the Scott herd.\n\nsbou <- bou %>% \n  filter(comments == \"Scott\")\n\n# how many animals?\nno_animals <- unique(sbou$animal.id)\n\n\n# lets look at the time period: \n\np1 <- ggplot(sbou, aes(year, fill = animal.id))+\n    geom_bar(position = \"dodge\")#+\n    #xlim(2021,2024)#+\n\n\n# duration of the collars within the Scott herd. \n\ntable_max <- sbou %>% \n  dplyr::select(animal.id, date_time) %>%\n  slice_max(date_time, by = animal.id) \ncolnames(table_max)<- c(\"animal.id\",\"max\")\n\ntable_min <- sbou %>% \n  dplyr::select(animal.id, date_time) %>%\n  slice_min(date_time, by = animal.id) \ncolnames(table_min)<- c(\"animal.id\",\"min\")\n\ndur <- left_join(table_max, table_min, by = join_by(animal.id)) %>%\n  distinct() %>%\n  dplyr::mutate(duration = max - min) %>%\n  mutate(dur_days = round( duration,1))%>%\n  mutate(dur_hrs = round(as.numeric(dur_days)*24,1)) %>%\n #mutate(dur_days = round( dur_hrs/24,1))%>%\n  mutate(year_start = year(min), \n         year_end = year(max))\n\n\n\ndur_plot <- ggplot(dur, aes(y=factor(animal.id))) +\n  geom_segment(aes(x=min, xend=max, y=factor(animal.id), yend=factor(animal.id)), size=1)+\n  xlab(\"Date\") + ylab(\"Tag\") \n\ndur_plot\n\n\n\n# months of the year. \np_duration <- ggplot(sbou, aes(factor(month), fill = factor(year)))+\n  geom_bar(position = \"dodge\") +\n  #xlim(1,12)+\n  facet_wrap(~animal.id)+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n# months of the year. \np_duration <- ggplot(sbou, aes(factor(year), fill = factor(month)))+\n  geom_bar(position = \"dodge\") +\n  #xlim(1,12)+\n  facet_wrap(~animal.id)+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n```\n:::\n\n\n# convert the dates to seasons \n\nNext we format the date variable so we can filter by months and years. We can also assign fixes to seasons based on the following dates : \n\n* Spring/calving (April,May)\n* Summer (June to August)\n*\tFall (September to November)\n*\tWinter (December to March)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsbou <- sbou %>% \n  mutate(season = case_when(\n            month %in% c(4,5) ~ \"spring\",\n            month %in% c(6,7,8) ~ \"summer\",\n            month %in% c(9,10,11) ~ \"Fall\",\n            month %in% c(12,1,2,3) ~ \"winter\", \n            \n  \n# check data spread\ncounts.per.season = indata %>%\n  group_by(season) %>%\n  summarise(count = n())\n\nggplot(counts.per.season, aes(x = season, y = count)) + \n  geom_bar(stat = \"identity\") + \n  labs(x = \"season\", y = \"no.of.fixes\", title = \"Scott Herd\")\n```\n:::\n",
    "supporting": [
      "intro-telemetry-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}