---
title: "Introduction to Spatial Data with R"
format: 
  revealjs:
    theme: [serif, slides.scss]
    code-copy: false
footer: "[Workshop Home](https://ninoxconsulting.github.io/r-telemetry-workshop-nov-2023)"
execute: 
  echo: true
  cache: true
---

```{r}
#| include: false
library(sf)
library(mapview)
library(bcdata)
library(ggplot2)
library(bcmaps)
```


## Outline {.larger}

- Introduction to Simple Features and the `sf` package
- Coordinate Reference Systems
- Reading various spatial data formats

## What are you going to come away with?

- Use `sf` package to:
   - Read a variety of vector data into R
   - Understand sf objects in R
- Understanding of Coordinate Reference Systems (CRS)

---

![](images/vector-raster.png){fig-alt="Vector-Raster" fig-align="center"}

::: aside
Image: http://www.tailsfromthefield.net
:::

::: {.notes}
Spatial data divided into two categories: Vector and Raster

- vector data represents the world using points, lines and polygons.
- discrete, well-defined borders, meaning that vector data usually have a high level of precision

- raster data divides the surface up into cells of constant size.
- basis of background images used in web-mapping
- aerial photography and satellite-based remote sensing devices.
- Rasters aggregate spatially specific features to a given resolution, meaning that they are consistent over space and scalable.
:::


## Simple Features {.center}

:::: {.columns}

::: {.column width="50%"}

### The `sf` R package^[sf package: <https://cran.r-project.org/package=sf>]

#### Replaces
- sp
- rgdal
- rgeos
:::

::: {.column width="50%"}
![](images/sf-classes.png){fig-alt="Simple Features" fig-width="600px" fig-align="center"}^[Geocomputation with R, fig 2.2: <https://geocompr.robinlovelace.net>]
:::
::::

::: {.notes}
- Simple Features is a standard specification (Open Geospatial Consortium) -
agreed-upon way to represent vector spatial data
- represent all common vector geometry types : points, lines, polygons and their respective ‘multi’ versions
- supports geometry collections, which can contain multiple geometry types in a single object.
- sf supersedes the sp ecosystem, which comprises sp , rgdal for data read/write  and rgeos for spatial operations.
- rgdal and rgeos are now retired and removed from CRAN
:::

## Reading & previewing spatial data

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
library(sf)
library(mapview)

airports <- read_sf(
  "raw_data/bc_airports.gpkg"
)

mapview(airports)
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
airports <- read_sf("raw_data/bc_airports.gpkg", quiet = TRUE)
mapview(airports)
```
:::
::::

## mapview

```{r fig.width=10}
mapview(airports, zcol = "NUMBER_OF_RUNWAYS")
```

## Structure of an `sf` object

```{r}
airports
```

::: {.notes}

go through sf header info:
- size (# of features and # of columns/attributes)
- geometry type
- dimension (XY - can have Z and M)
- bbox
- CRS

:::

## Key features of an `sf` object

:::: {.columns}
::: {.column width="50%"}
```{r}
#| class-output: small-output
#| message: true
st_geometry(airports)
st_bbox(airports)
```
:::

::: {.column width="50%"}
```{r}
#| classes: small-output
#| message: true
st_crs(airports)
```
:::
::::

## An `sf` object is a `data.frame`

```{r}
class(airports)
is.data.frame(airports)
summary(airports)
```

## Coordinate Reference Systems

:::: {.columns .small-text}

::: {.column width="50%"}
### Geographic
- spherical or ellipsoidal surface
- ellipsoid defined by the _datum_
- lat/long, measured in angular distances (degrees/radians)

![](images/world-geographic.jpg){fig-align="center"}
:::

::: {.column width="50%"}
### Projected
- Cartesian coordinates on a flat plane
- origin, x and y axes, linear unit of measurement (e.g., m)

![](images/world-projected.jpg)
:::
::::

::: {.notes}

defines how the spatial elements of the data relate to the surface of the Earth

Geographic:
- identify any location on the Earth’s surface using two values — longitude and latitude.
- Longitude is location in the East-West direction in angular distance from the Prime Meridian plane.
- Latitude is angular distance North or South of the equatorial plane.
- Distances in geographic CRSs are therefore not measured in meters. This has important consequences

Projected:
- based on a geographic CRS
- rely on map projections to convert the three-dimensional surface of the Earth into Easting and Northing (x and y) values in a projected CRS
- often named based on a property they preserve: equal-area preserves area, azimuthal preserve direction, equidistant preserve distance, and conformal preserve local shape.
- conic, cylindrical, planar
:::

## CRSs in R: EPSG codes

```{r}
st_crs(airports)$input
```

<br>

:::: {.columns}
::: {.column width="50%"}

#### BC Albers - B.C.'s standard projection
- Equal Area conic
- Centre: c(-126, 54)
:::

::: {.column width="50%"}

```{r echo=FALSE, cache=TRUE}
#| fig-width: 6
#| fig-align: center
albers_centre <- st_sfc(st_point(c(-126, 54)), crs = 4326) %>%
  st_transform(3005)

ggplot() +
  geom_sf(data = bc_bound()) +
  geom_sf(data = albers_centre, colour = "blue", size = 5) +
  geom_sf(data = bc_cities() %>% filter(NAME == "Burns Lake")) +
  geom_sf_text(data = bc_cities() %>% filter(NAME == "Burns Lake"), aes(label = NAME), nudge_x = 100000, nudge_y = 30000) +
  theme_void()
```

:::
::::

::: center-x
https://epsg.io/3005
:::

::: {.notes}

EPSG codes
BC Albers

:::

## WKT (Well-Known Text)

```{r}
st_crs(3005)
```

## Your turn {.inverse}
<br>

### Read in the electoral districts data in the `data` folder:

- What type of geometry is it?
- What is the CRS?
- What is the EPSG code?

## Solution

```{r}
#| class-output: small-output
elec_bc <- read_sf("raw_data/bc_electoral_districts.shp")
st_geometry_type(elec_bc, by_geometry = FALSE)
st_crs(elec_bc)
```

<https://epsg.io/4326>

## Basic plotting

```{r}
#| fig-align: center
plot(elec_bc)
```

## Basic plotting

:::: {.columns}
::: {.column width="50%"}
### Just the shapes
```{r}
#| fig-width: 6
#| fig-align: center
plot(st_geometry(elec_bc))
```
:::

::: {.column width="50%"}
### A single column
```{r}
#| fig-width: 6
#| fig-align: center
plot(elec_bc["ED_NAME"])
```
:::
::::

::: {.notes}

- Notice strange orientation of BC - north is greatly exaggerated
- because in WGS84 (lat/long)
- global CRS centred at lon 0 (Greenwich) and lat 0 (equator)
- good for web mapping, not good for BC

:::

## Transforming coordinate systems

```{r}
elec_bc_albers <- st_transform(elec_bc, 3005)
```

Or, if you have another object in the CRS you want to use:

```{r}
elec_bc_albers <- st_transform(elec_bc, st_crs(airports))
st_crs(elec_bc_albers)
```

---

:::: {.columns}
::: {.column width="50%"}

### WGS 84 (EPSG: 4326)

```{r}
#| fig-width: 6
#| fig-align: center
plot(elec_bc[, "ED_NAME"])
```
:::

::: {.column width="50%"}
### BC Albers (EPSG: 3005)

```{r}
#| fig-width: 6
#| fig-align: center
plot(elec_bc_albers[, "ED_NAME"])
```
:::
::::

## Your turn {.inverse}

Load `"raw_data/ski_resorts.csv"` as an `sf` object

```{r echo=FALSE}
knitr::kable(head(read.csv("raw_data/ski_resorts.csv")),
             format = "html")
```

## Hints: {.inverse}

Load `"raw_data/ski_resorts.csv"` as an `sf` object

```{r, eval=FALSE}
ski_resorts <- read.csv("raw_data/ski_resorts.csv")
ski_resorts <- st_as_sf(ski_resorts, ...)
```

## Solution

```{r cache=TRUE}
ski_resorts <- read.csv("raw_data/ski_resorts.csv")

ski_resorts <- st_as_sf(ski_resorts,
                        coords = c("longitude", "latitude"),
                        crs = 4326)

head(ski_resorts)
```


## Geometric calculations

:::: {.columns}
::: {.column width="50%"}
#### Geometric Measurements

- `st_area()`
- `st_length()`
- `st_distance()`
:::

::: {.column width="50%"}
#### Geometric Operations

- `st_union()`
- `st_intersection()`
- `st_difference()`
- `st_sym_difference()`
:::
::::

## Geometry Predicates

::: center-x
Use with `st_filter()` or `st_join()`
:::

:::: {.columns}
::: {.column width="50%"}
- `st_intersects()`:<br>  touch or overlap
- `st_disjoint()`:<br>  !intersects
- `st_touches()`: touch
- `st_crosses()`:<br>  cross (don't touch)
- `st_within()`: within
:::

::: {.column width="50%"}
- `st_contains()`:<br>  contains
- `st_overlaps()`:<br>  overlaps
- `st_covers()`: cover
- `st_covered_by()`:<br>  covered by
- `st_equals()`: equals
:::
::::


## Manipulating Geometries

:::: {.columns}
::: {.column width="50%"}
- `st_line_merge()`
- `st_segmentize()`
- `st_voronoi()`
- `st_centroid()`
- `st_convex_hull()`
- `st_triangulate()`
:::

::: {.column width="50%"}
- `st_polygonize()`
- `st_split()`
- `st_buffer()`
- `st_make_valid()`
- `st_boundary()`
- ...
:::
::::

## Your turn {.inverse}

1. Calculate the area of each electoral district
2. Create an sf object of only airports within the Nelson-Creston electoral district.
3. Plot the ski resorts as circles, where the size of the circle is related to the elevation of the resort.


::: notes

st_area(elec_bc_albers)

st_filter(airports, elec_bc_albers[elec_bc_albers$ED_NAME == "Nelson-Creston", ])

mapview(st_buffer(ski_resorts, dist = ski_resorts$elevation*10))

:::



<!-- # Use `ggplot2::geom_sf()` to make nice maps -->

<!-- ```{r eval=FALSE} -->
<!-- library(ggplot2) -->
<!-- ``` -->


<!-- ```{r cache=TRUE} -->
<!-- ggplot() + # leave this empty! -->
<!--   geom_sf(data = elec_bc) -->
<!-- ``` -->

<!-- ??? -->



<!-- --- -->

<!-- ## Use `ggplot2` aesthetics to style maps -->

<!-- ```{r cache=TRUE, fig.width=10, fig.height=6} -->
<!-- ggplot() +  -->
<!--   geom_sf(data = ski_resorts, aes(colour = elevation), size = 5) -->
<!-- ``` -->

<!-- --- -->

<!-- class: inverse, middle -->

<!-- .large.pull-left[ -->
<!-- <br/> -->
<!-- - **`bcdc_browse()`**  -->
<!--   - Open the catalogue in your default browser -->
<!-- - **`bcdc_search()`**  -->
<!--   - Search records in the catalogue -->
<!-- - **`bcdc_search_facets()`**  -->
<!--   - List catalogue facet search options -->
<!-- - **`bcdc_get_record()`**  -->
<!--   - Print a catalogue record -->
<!-- - **`bcdc_get_data()`**  -->
<!--   - Get catalogue data -->
<!-- - **`bcdc_query_geodata()`**  -->
<!--   - Get & query catalogue geospatial data available through a [Web Service](https://www2.gov.bc.ca/gov/content?id=95D78D544B244F34B89223EF06DF74E) -->
<!-- ] -->

<!-- .pull-right[ -->
<!-- <img src="https://github.com/bcgov/bcdata/raw/master/inst/sticker/bcdata.png" alt="bcdata" /> -->

<!-- .footnote[https://bcgov.github.io/bcdata] -->
<!-- ] -->



<!-- --- -->

<!-- ## Get data with `bcdata` -->

<!-- https://catalogue.data.gov.bc.ca/dataset/railway-track-line -->

<!-- ```{r eval=FALSE} -->
<!-- library(bcdata) -->
<!-- ``` -->

<!-- ```{r cache=TRUE} -->
<!-- railways <- bcdc_get_data("railway-track-line", -->
<!--                           resource = "bf30d34e-1f6b-4034-a35c-1cf7c9707ae7") -->
<!-- # OR: railways <- bcdc_get_data("WHSE_BASEMAPPING.GBA_RAILWAY_TRACKS_SP") -->
<!-- railways -->
<!-- ``` -->

<!-- --- -->

<!-- ```{r fig.width=11, fig.height=7} -->
<!-- ggplot() +  -->
<!--   geom_sf(data = railways, aes(colour = USE_TYPE)) -->
<!-- ``` -->

<!-- --- -->

<!-- ## Using `dplyr` with `sf` objects -->

<!-- select: geometry is "sticky" -->

<!-- ```{r} -->
<!-- railways <- select(railways, TRACK_NAME, TRACK_CLASSIFICATION,  -->
<!--                    USE_TYPE) -->
<!-- railways -->
<!-- ``` -->

<!-- --- -->

<!-- ## Computing geometric measurements -->

<!-- - `st_area` -->
<!-- - `st_length` -->
<!-- - `st_distance` -->

<!-- ```{r} -->
<!-- st_length(railways) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- railways <- mutate(railways, track_length = st_length(geometry)) -->
<!-- ``` -->

<!-- --- -->

<!-- class: inverse, left, middle -->

<!-- # Your turn -->

<!-- .Large[Create an `sf` object from railways containing only track segments  -->
<!-- longer than 5 km] -->

<!-- --- -->

<!-- ## Solution -->

<!-- ### Note geometric measures return `units` -->

<!-- ```{r} -->
<!-- long_railways <- filter(railways, as.numeric(track_length) > 5000) -->
<!-- ``` -->

<!-- OR  -->

<!-- ```{r} -->
<!-- library(units) -->
<!-- long_railways <- filter(railways, track_length > as_units(5000, "m")) -->
<!-- ``` -->

<!-- --- -->

<!-- ```{r cache=TRUE, fig.width=11, fig.height=7} -->
<!-- ggplot() + -->
<!--   geom_sf(data = long_railways, aes(colour = as.numeric(track_length))) -->
<!-- ``` -->

<!-- --- -->
<!-- ## dplyr::summarise -->

<!-- ## Using summarize() - Calculate `nr_regions` -->
<!-- ```{r, cache=TRUE} -->
<!-- nr_district <- bcdc_get_data('natural-resource-nr-district') -->


<!-- nr_region <- nr_district %>%  -->
<!--   group_by(REGION_ORG_UNIT_NAME) %>%  -->
<!--   summarise() # << defaults to union -->
<!-- ``` -->

<!-- --- -->

<!-- ```{r cache=TRUE, fig.width=11, fig.height=7} -->
<!-- ggplot() + -->
<!--   geom_sf(data = nr_region, colour = "white",  -->
<!--           aes(fill = REGION_ORG_UNIT_NAME))  -->
<!-- ``` -->

<!-- --- -->

<!-- .pull-left[ -->
<!-- ```{r cache=TRUE} -->
<!-- nr_region_multi <- nr_district %>%  -->
<!--   group_by(REGION_ORG_UNIT_NAME) %>%  -->
<!--   summarise(do_union = FALSE) # <<-- -->

<!-- nr_region_multi -->
<!-- ``` -->
<!-- ] -->

<!-- .pull-right[ -->
<!-- ```{r cache=TRUE} -->
<!-- ggplot() + -->
<!--   geom_sf(data = nr_region_multi, colour = "white",  -->
<!--           aes(fill = REGION_ORG_UNIT_NAME))  -->
<!-- ``` -->
<!-- ] -->

<!-- --- -->
<!-- class: inverse, left, middle -->

<!-- # Your turn -->

<!-- .Large[Find the total area of each NR region] -->

<!-- --- -->

<!-- ## Solution -->

<!-- ```{r, cache=TRUE} -->
<!-- nr_region %>%  -->
<!--   mutate(region_area = st_area(geometry)) -->
<!-- ``` -->

<!-- --- -->

<!-- class: inverse, middle -->

<!-- ```{r, theme, warning=FALSE, echo=FALSE} -->
<!-- suppressWarnings(theme_set(theme_void())) -->
<!-- ``` -->

<!-- .large.pull-left[ -->
<!-- <br/> -->
<!-- - **`bcdc_browse()`**  -->
<!--   - Open the catalogue in your default browser -->
<!-- - **`bcdc_search()`**  -->
<!--   - Search records in the catalogue -->
<!-- - **`bcdc_search_facets()`**  -->
<!--   - List catalogue facet search options -->
<!-- - **`bcdc_get_record()`**  -->
<!--   - Print a catalogue record -->
<!-- - <span style="color:blue"> **`bcdc_get_data()`**  -->
<!--   - Get catalogue data </span> -->
<!-- - <span style="color:blue"> **`bcdc_query_geodata()`**  -->
<!--   - Get & query catalogue geospatial data available through a [Web Service](https://www2.gov.bc.ca/gov/content?id=95D78D544B244F34B89223EF06DF74E) </span> -->
<!-- ] -->

<!-- .pull-right[ -->
<!-- <img src="https://github.com/bcgov/bcdata/raw/master/inst/sticker/bcdata.png" alt="bcdata" /> -->

<!-- .footnote[https://bcgov.github.io/bcdata] -->
<!-- ] -->
<!-- --- -->
<!-- ## Grabbing our data -->
<!-- ```{r, cache=TRUE} -->
<!-- library(bcdata) -->

<!-- nr_district <- bcdc_get_data('natural-resource-nr-district') -->
<!-- lines <- bcdc_get_data('bc-transmission-lines') -->

<!-- fires_2017 <- bcdc_query_geodata('fire-perimeters-historical') %>% -->
<!--   filter(FIRE_YEAR == 2017) %>%  -->
<!--   collect() -->

<!-- big_fires <- fires_2017 %>% -->
<!--   filter(FIRE_NUMBER %in% c('C10784', 'C50647')) -->

<!-- bc <- bcdc_query_geodata('7-5m-provinces-and-states-the-atlas-of-canada-base-maps-for-bc') %>%  -->
<!--   filter(ENGLISH_NAME == 'British Columbia') %>%  -->
<!--   collect() -->
<!-- ``` -->
<!-- --- -->
<!-- class: inverse, left, middle -->
<!-- # Multi layer spatial plots with `ggplot2` -->


<!-- --- -->
<!-- ## Natural Resource Districts, Power Lines and Big Fires -->
<!-- .pull-left[ -->
<!-- ```{r} -->
<!-- library(ggplot2) -->

<!-- m <- ggplot() + -->
<!--   geom_sf(data = bc, fill = "grey80") + -->
<!--   geom_sf(data = nr_district, fill = "purple", alpha = 0.5) + -->
<!--   geom_sf(data = big_fires, fill = "orange", alpha = 0.5) + -->
<!--   geom_sf(data = lines, colour = "yellow") -->
<!-- ``` -->
<!-- ] -->

<!-- .pull-right[ -->
<!-- ```{r, echo=FALSE, dpi = 300} -->
<!-- m -->
<!-- ``` -->

<!-- ] -->

<!-- --- -->
<!-- class: inverse, left, middle -->
<!-- # Your turn -->
<!-- .Large[ -->
<!-- - Using `ggplot2` plot only *two* layers  -->
<!--   1. `big_fires`  -->
<!--   2. `fire_districts` <- only "Stuart Nechako", "Quesnel", "Cariboo-Chilcotin", and "Prince George" natural resource districts (`nr_district`) -->
<!-- ] -->
<!-- --- -->
<!-- ## Solution -->

<!-- ```{r, eval=TRUE} -->
<!-- fire_districts <- nr_district %>% -->
<!--   filter(DISTRICT_NAME %in% c("Stuart Nechako Natural Resource District",  -->
<!--                               "Quesnel Natural Resource District",  -->
<!--                               "Cariboo-Chilcotin Natural Resource District",  -->
<!--                               "Prince George Natural Resource District" -->
<!--                               )) -->
<!-- ``` -->

<!-- ```{r, eval=FALSE} -->
<!-- ggplot() + -->
<!--   geom_sf(data = fire_districts, fill = "purple", alpha = 0.5) + -->
<!--   geom_sf(data = big_fires, fill = "orange", alpha = 0.5) -->

<!-- ``` -->

<!-- -- -->

<!-- ## Quesnel Natural Resource District and C10784 -->
<!-- ```{r} -->
<!-- biggest_fire <- big_fires %>% -->
<!--   filter(FIRE_NUMBER == "C10784") -->

<!-- quesnel_district <- nr_district %>% -->
<!--   filter(DISTRICT_NAME == "Quesnel Natural Resource District") -->
<!-- ``` -->
<!-- --- -->

<!-- ## Quesnel Natural Resource District and C10784 -->
<!-- ```{r} -->
<!-- p <- ggplot() + -->
<!--   geom_sf(data = quesnel_district, fill = "purple", alpha = 0.5) + -->
<!--   geom_sf(data = biggest_fire, fill = "orange", alpha = 0.5) -->
<!-- p -->
<!-- ``` -->

<!-- --- -->
<!-- ## `st_union` -->
<!-- ```{r} -->
<!-- library(sf) -->
<!-- unionized <- st_union(quesnel_district, biggest_fire) -->
<!-- p + geom_sf(data = unionized, size = 1.5, fill = NA, colour = "lightslateblue") -->
<!-- ``` -->

<!-- --- -->
<!-- ## `st_intersection` -->

<!-- ```{r} -->
<!-- intersected <- st_intersection(quesnel_district, biggest_fire) -->
<!-- p + geom_sf(data = intersected, size = 1.5, fill = NA, colour = "lightslateblue") -->
<!-- ``` -->
<!-- --- -->
<!-- ## `st_difference` -->
<!-- ```{r} -->
<!-- differenced <- st_difference(quesnel_district, biggest_fire) -->
<!-- p + geom_sf(data = differenced, size = 1.5, fill = NA, colour = "lightslateblue") -->
<!-- ``` -->

<!-- --- -->
<!-- class: inverse, left, middle -->
<!-- # Your turn -->
<!-- .Large[ -->
<!-- Create a geometry of all transmission lines that intersect the four natural resource districts (`fire_districts`) and create a multi-layer plot -->
<!-- ] -->
<!-- --- -->
<!-- ## Solution -->
<!-- ```{r} -->
<!-- fire_lines <- lines %>%  -->
<!--   st_intersection(fire_districts) -->

<!-- ggplot() + -->
<!--   geom_sf(data = fire_districts, fill = "purple", alpha = 0.5) + -->
<!--   geom_sf(data = big_fires, fill = "orange", alpha = 0.5) +  -->
<!--   geom_sf(data = fire_lines, colour = "yellow") -->
<!-- ``` -->

<!-- --- -->

<!-- .pull-right[ -->
<!-- ### Only for subsetting -->
<!-- ### Based on PostGIS -->
<!-- ### Very similar to ESRI naming -->
<!-- ] -->
<!-- --- -->
<!-- ## Usage -->
<!-- ```{r} -->
<!-- p2 <- ggplot() + -->
<!--   geom_sf(data = fire_districts, fill = "purple", alpha = 0.5) + -->
<!--   geom_sf(data = big_fires, fill = "orange", alpha = 0.5) +  -->
<!--   geom_sf(data = fire_lines, colour = "yellow") -->
<!-- p2 -->
<!-- ``` -->


<!-- --- -->

<!-- ## Does any district intersect this fire? -->
<!-- ```{r} -->
<!-- st_intersects(fire_districts, big_fires, sparse = FALSE) -->
<!-- fire_districts[big_fires, , op = st_intersects] -->
<!-- ``` -->

<!-- --- -->
<!-- ## Does any district intersect this fire? -->
<!-- ```{r} -->
<!-- does_intersect <- fire_districts[big_fires, , op = st_intersects] -->
<!-- p2 + geom_sf(data = does_intersect, fill = NA, colour = "lightslateblue", size = 1.5) -->
<!-- ``` -->

<!-- --- -->
<!-- ## Which polygon in intersected by a transmission line? -->
<!-- ```{r} -->
<!-- crosses_lines <- big_fires[fire_lines, , op = st_crosses] -->
<!-- p2 + geom_sf(data = crosses_lines, fill = NA, colour = "lightslateblue", size = 1.5) -->
<!-- ``` -->
<!-- --- -->
<!-- class: inverse, left, middle -->
<!-- # Your turn -->
<!-- .Large[ -->
<!-- Which fires crossed transmission lines in 2017? Use geometry predicates to determine and ggplot2 to plot -->
<!-- ] -->
<!-- --- -->

<!-- ## Solution -->
<!-- ```{r} -->
<!-- all_crosses <- fires_2017[lines, , op = st_crosses] -->
<!-- ggplot() + -->
<!--   geom_sf(data = bc, fill = "grey80") + -->
<!--   geom_sf(data = nr_district, fill = "purple", alpha = 0.5) + -->
<!--   geom_sf(data = fires_2017, fill = "orange", alpha = 0.5) + -->
<!--   geom_sf(data = lines, colour = "yellow") +  -->
<!--   geom_sf(data = all_crosses, fill = "yellow", alpha = 0.5) -->
<!-- ``` -->



<!-- --- -->
<!-- ## non spatial join -->
<!-- What is the mean population of cities that have a courthouse, grouped by municipality type? -->
<!-- ```{r} -->
<!-- courts <- bcdc_get_data('court-locations', resource = '23aa0b75-2715-4ccb-9a36-9a608450dc2d') -->
<!-- bc_cities <- bcdc_get_data('bc-major-cities-points-1-2-000-000-digital-baseline-mapping') -->

<!-- courts %>%  -->
<!--   left_join(bc_cities, by = c("City" = "NAME")) %>%  -->
<!--   group_by(LONG_TYPE) %>%  -->
<!--   summarise(mean_pop = mean(POP_2000)) -->
<!-- ``` -->

<!-- --- -->
<!-- ### `st_join` -->
<!-- ```{r, fig.width = 11, fig.height=4} -->
<!-- cities_by_nr <- bc_cities %>%  -->
<!--   st_join(nr_district, join = st_intersects) %>%  -->
<!--   group_by(REGION_ORG_UNIT_NAME) %>%  -->
<!--   summarise(nr_pop_2000 = sum(POP_2000)) -->

<!-- ggplot(cities_by_nr) + -->
<!--   geom_col(aes(x = REGION_ORG_UNIT_NAME, y = nr_pop_2000)) + -->
<!--   coord_flip() + -->
<!--   theme_minimal() -->
<!-- ``` -->

<!-- ??? -->
<!-- > Joining two non-spatial datasets relies on a shared ‘key’ variable. Spatial data joining applies the same concept, but instead relies on shared areas of geographic space (it is also know as spatial overlay). -->

<!-- - [Geocomputation with R](https://geocompr.robinlovelace.net/intro.html) -->

<!-- --- -->
<!-- class: inverse, left, middle -->
<!-- # Your turn -->
<!-- .Large[ -->
<!-- - Which natural resource district contains the greatest length of transmission lines? -->
<!-- - Hint - use the `lines` and `nr_district` datasets -->
<!-- ] -->

<!-- --- -->
<!-- ## Solution -->
<!-- ```{r} -->
<!-- lines %>%  -->
<!--   st_join(nr_district) %>%  -->
<!--   mutate(length_lines = st_length(geometry)) %>%  -->
<!--   group_by(DISTRICT_NAME) %>%  -->
<!--   summarise(district_length_lines = sum(length_lines)) %>%  -->
<!--   arrange(desc(district_length_lines)) -->
<!-- ``` -->

<!-- --- -->
<!-- `st_buffer` -->

<!-- ```{r} -->
<!-- bc_cities_buffer <- st_buffer(bc_cities, dist = 20000) ## 20km -->
<!-- ggplot() + -->
<!--   geom_sf(data = bc) + -->
<!--   geom_sf(data = bc_cities) + -->
<!--   geom_sf(data = bc_cities_buffer, fill = "green", alpha = 0.5) -->
<!-- ``` -->


<!-- --- -->
<!-- ## Making nice plots -->
<!-- ```{r, echo = FALSE, fig.height=7, fig.width=11, cache=TRUE} -->
<!-- ggplot() + -->
<!--   geom_sf(data = bc, fill = "grey80") + -->
<!--   geom_sf(data = nr_district, alpha = 0.5, aes(fill = REGION_ORG_UNIT_NAME)) + -->
<!--   geom_sf(data = fires_2017, fill = "orange", alpha = 0.5) + -->
<!--   geom_sf(data = lines, colour = "yellow") + -->
<!--   coord_sf(datum = NA, expand = FALSE) + -->
<!--   annotation_scale(pad_x = unit(2, "cm"), pad_y = unit(1, "cm"), -->
<!--                    location = "bl",  style = "ticks", width_hint = 0.2) + -->
<!--   annotation_north_arrow(location = "bl", which_north = "grid", pad_x = unit(2, "cm"), pad_y = unit(6, "cm")) + -->
<!--   labs(title = "Fire Activity Near Transmission Lines - 2017") + -->
<!--   theme_void() + -->
<!--   theme(panel.background = element_rect(fill = "aliceblue"), -->
<!--         #legend.position = c(.15, .15), -->
<!--         legend.box.background = element_rect(), -->
<!--         legend.box.margin = margin(6, 6, 6, 6)) -->
<!-- ``` -->

<!-- --- -->
<!-- ## Getting Data -->
<!-- ```{r} -->
<!-- wna <- bcdc_query_geodata('7-5m-provinces-and-states-the-atlas-of-canada-base-maps-for-bc') %>%  -->
<!--   filter(!is.na(NAME)) %>%  -->
<!--   collect() -->

<!-- nr_region <- nr_district %>%  -->
<!--   group_by(REGION_ORG_UNIT_NAME) %>%  -->
<!--   summarise()  -->
<!-- ``` -->

<!-- --- -->
<!-- ## + Western North American -->
<!-- ```{r} -->
<!-- fancy_plot <- ggplot() + -->
<!--   geom_sf(data = wna) -->
<!-- fancy_plot -->
<!-- ``` -->
<!-- --- -->
<!-- ## + Natural Resource Regions -->
<!-- ```{r} -->
<!-- fancy_plot +  -->
<!--   geom_sf(data = nr_region, alpha = 0.5, aes(fill = REGION_ORG_UNIT_NAME)) -->
<!-- ``` -->
<!-- --- -->
<!-- ## + Intersect Natural Resource Districts -->
<!-- ```{r} -->
<!-- nr_region_int <- nr_region %>%  -->
<!--   st_intersection(wna) -->

<!-- fancy_plot <- fancy_plot + geom_sf(data = nr_region_int, alpha = 0.5, aes(fill = REGION_ORG_UNIT_NAME)) -->
<!-- fancy_plot -->
<!-- ``` -->
<!-- --- -->

<!-- ## + Add some lines -->
<!-- ```{r} -->
<!-- fancy_plot <- fancy_plot + -->
<!--   geom_sf(data = lines, colour = "yellow") -->
<!-- ``` -->

<!-- --- -->
<!-- ## + Cities -->
<!-- ```{r} -->
<!-- fancy_plot + geom_sf(data = bc_cities) -->
<!-- ``` -->

<!-- --- -->
<!-- ```{r} -->
<!-- nrow(bc_cities) -->

<!-- cities_by_region <- bc_cities %>%  -->
<!--   st_join(nr_region, join = st_intersects) %>%  -->
<!--   group_by(REGION_ORG_UNIT_NAME) %>%  -->
<!--   filter(POP_2000 == max(POP_2000)) -->

<!-- fancy_plot + geom_sf(data = cities_by_region) -->
<!-- ``` -->

<!-- --- -->
<!-- ## + Cities with Name -->

<!-- ```{r} -->
<!-- fancy_plot <- fancy_plot + -->
<!--   geom_sf(data = cities_by_region) + -->
<!--   geom_sf_label(data = cities_by_region, aes(label = NAME), nudge_y = 3E4, nudge_x = 4E4)  -->
<!-- fancy_plot -->
<!-- ``` -->
<!-- --- -->
<!-- ## + Labelling the Regions -->
<!-- ```{r} -->
<!-- region_names <- st_centroid(nr_region) %>%  -->
<!--   mutate(REGION_ORG_UNIT_NAME = gsub(" Natural Resource Region", "", REGION_ORG_UNIT_NAME)) -->

<!-- fancy_plot + -->
<!--   geom_sf_text(data = region_names, aes(label = REGION_ORG_UNIT_NAME), size = 6) -->

<!-- ``` -->
<!-- --- -->
<!-- ## + Map Components -->
<!-- ```{r} -->
<!-- library(ggspatial) -->
<!-- fancy_plot + -->
<!--   geom_sf_text(data = region_names, aes(label = REGION_ORG_UNIT_NAME), size = 6) + -->
<!--   coord_sf(datum = NA, expand = FALSE) + -->
<!--   annotation_scale(pad_x = unit(2, "cm"), pad_y = unit(1, "cm"), -->
<!--                    location = "bl",  style = "ticks", width_hint = 0.2) + -->
<!--   annotation_north_arrow(location = "bl", which_north = "grid") -->

<!-- ``` -->
<!-- --- -->
<!-- ## + Legends and titles -->
<!-- ```{r, echo=FALSE} -->
<!-- text_box <- paste(strwrap("Some text that explains why I am plotting so things here and then find another thing to talk about again.", width = 40), collapse = "\n") -->

<!-- fancy_plot + -->
<!--   geom_sf_text(data = region_names, aes(label = REGION_ORG_UNIT_NAME), size = 6) + -->
<!--   coord_sf(datum = NA, expand = FALSE) + -->
<!--   annotation_scale(pad_x = unit(2, "cm"), pad_y = unit(1, "cm"), -->
<!--                    location = "bl",  style = "ticks", width_hint = 0.2) + -->
<!--   annotation_north_arrow(location = "bl", which_north = "grid") + -->
<!--   labs(title = "British Columbia Natural Resource Regions", -->
<!--        subtitle = "Major transmission lines displayed using yellow", -->
<!--        caption = "Data retrieved from the BC Data Catalogue using the bcdata package") + -->
<!--   guides(fill = FALSE) + -->
<!--   annotate("label", x = 4E5, y = 4E5, label = text_box) -->
<!-- ``` -->
<!-- --- -->

<!-- ## + Themes and Colours -->
<!-- ```{r} -->
<!-- out <- fancy_plot + -->
<!--   geom_sf_text(data = region_names, aes(label = REGION_ORG_UNIT_NAME), size = 6) + -->
<!--   coord_sf(datum = NA, expand = FALSE) + -->
<!--   annotation_scale(pad_x = unit(2, "cm"), pad_y = unit(1, "cm"), -->
<!--                    location = "bl",  style = "ticks", width_hint = 0.2) + -->
<!--   annotation_north_arrow(location = "bl", which_north = "grid") + -->
<!--   labs(title = "British Columbia Natural Resource Regions", -->
<!--        subtitle = "Major transmission lines displayed in yellow", -->
<!--        caption = "Data retrieved from the BC Data Catalogue using the bcdata package") + -->
<!--   guides(fill = FALSE) + -->
<!--   annotate("label", x = 4E5, y = 4E5, label = text_box) + -->
<!--   theme_void() + -->
<!--   theme(panel.background = element_rect(fill = "aliceblue"), -->
<!--         panel.border = element_rect(size = 2, fill = NA)) -->
<!-- ``` -->

<!-- --- -->

<!-- ```{r} -->
<!-- out -->
<!-- ``` -->
<!-- --- -->

<!-- ## + export -->
<!-- ```{r, eval=FALSE} -->
<!-- ggsave(out, file = "fancy_plot.pdf", height = 15, width = 15) -->
<!-- ``` -->

<!-- --- -->

<!-- ## + Some additional tweaking -->
<!-- ```{r, eval=FALSE} -->
<!-- out <- fancy_plot + -->
<!--   geom_sf_text(data = region_names, aes(label = REGION_ORG_UNIT_NAME), size = 6) + -->
<!--   coord_sf(datum = NA, expand = FALSE) + -->
<!--   annotation_scale(pad_x = unit(2, "cm"), pad_y = unit(1, "cm"), -->
<!--                    location = "bl",  style = "ticks", width_hint = 0.2) + -->
<!--   annotation_north_arrow(location = "bl", which_north = "grid") + -->
<!--   labs(title = "British Columbia Natural Resource Regions", -->
<!--        subtitle = "Major transmission lines displayed in yellow", -->
<!--        caption = "Data retrieved from the BC Data Catalogue using the bcdata package") + -->
<!--   guides(fill = FALSE) + -->
<!--   annotate("label", x = 4E5, y = 4E5, label = text_box) + -->
<!--   theme_void() + -->
<!--   theme(panel.background = element_rect(fill = "aliceblue"), -->
<!--         panel.border = element_rect(size = 2, fill = NA),  -->
<!--         plot.title = element_text(size = 20), -->
<!--         plot.subtitle = element_text(size = 18), -->
<!--         plot.caption = element_text(size = 15)) -->

<!-- ggsave(out, file = "fancy_plot.pdf", height = 15, width = 15) -->
<!-- ``` -->

<!-- --- -->

<!-- ## Resources for R -->

<!-- <a href = "https://stackoverflow.com/"><img src="https://cdn.sstatic.net/Sites/stackoverflow/company/img/logos/so/so-logo.svg?v=2bb144720a66" alt="Drawing" style="width: 400px;" /> -->


<!-- <img src="https://www.rstudio.com/wp-content/uploads/2017/11/logoRStudioCommunity.svg" alt="Drawing" style="width: 400px;" /> -->

<!-- <img src="https://www.r-project.org/logo/Rlogo.png" alt="Drawing" style="width: 300px;" /> -->

